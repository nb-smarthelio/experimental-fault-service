import logging
import os

import pytest
import pandas as pd

from heliolib.data_transformation_service import TimestreamPivotTransformer


def read_valid_dataframe_from_timestream():
    """
    Reads a valid dataframe from the timestream_data.csv file.

    Returns:
    -------
        pd.DataFrame: The dataframe containing the data from the timestream_data.csv file.
    """
    # Get the directory path of the current script
    script_directory = os.path.dirname(os.path.abspath(__file__))

    # Construct the file path by joining the script directory with the file name
    mock_data_file = os.path.join(script_directory, "timestream_data.csv")

    # Read the CSV file into a dataframe using pandas read_csv function
    # Parse the dates in the dataframe columns as datetime objects
    # Set the index column of the dataframe as the first column (column index 0)
    dataframe = pd.read_csv(mock_data_file, parse_dates=True, index_col=0)

    # Return the dataframe containing the data from the timestream_data.csv file
    return dataframe


def test_transform_timestream_data_initialization_with_invalid_data():
    """
    Tests the initialization of the TimestreamPivotTransformer class with an empty dataframe.

    Raises
    ------
    ValueError
        If the dataframe is empty.

    Returns
    -------
    None
        This function does not return any values.
    """
    # Create an empty dataframe
    dataframe = pd.DataFrame()

    # Check if a ValueError is raised when initializing the TimestreamPivotTransformer with the empty dataframe
    with pytest.raises(ValueError) as error:
        TimestreamPivotTransformer(dataframe)

    # Assert that the error message matches the expected value
    assert str(error.value) == "Provided data for transformation is empty."


def test_transform_timestream_data_initialization_with_valid_data():
    """
    Test the initialization of the 'TimestreamPivotTransformer' class with valid data.

    This function tests the initialization of the 'TimestreamPivotTransformer' class
    by creating a valid dataframe from Timestream, and then creating an instance
    of the 'TimestreamPivotTransformer' class using the dataframe. It asserts that
    the transformer is an instance of the 'TimestreamPivotTransformer' class.

    Parameters:
    None

    Returns:
    None
    """
    # Create a valid dataframe from Timestream
    dataframe = read_valid_dataframe_from_timestream()

    # Create an instance of the 'TimestreamPivotTransformer' class using the dataframe
    transformer = TimestreamPivotTransformer(dataframe)

    # Assert that the transformer is an instance of the 'TimestreamPivotTransformer' class
    assert isinstance(
        transformer, TimestreamPivotTransformer
    ), "The transformer is not an instance of TimestreamPivotTransformer"


def test_check_columns_and_assign_aggregation_levels():
    """
    Test the 'check_columns_and_assign_aggregation_levels' method of the
    'TimestreamPivotTransformer' class.

    This function tests the 'check_columns_and_assign_aggregation_levels' method
    of the 'TimestreamPivotTransformer' class by creating a valid dataframe from
    Timestream, creating an instance of the 'TimestreamPivotTransformer' class,
    calling the 'check_columns_and_assign_aggregation_levels' method on the
    transformer object, and asserting that the aggregation levels are correct.

    Parameters:
    --------
    None

    Returns:
    -------
    None
    """
    # Create a valid dataframe from Timestream
    dataframe = read_valid_dataframe_from_timestream()

    # Create an instance of the 'TimestreamPivotTransformer' class using the dataframe
    transformer = TimestreamPivotTransformer(dataframe)

    # Call the 'check_columns_and_assign_aggregation_levels' method on the transformer object
    transformer._check_columns_and_assign_aggregation_levels()

    # Assert that the aggregation levels are correct
    assert transformer.aggregation_levels == {
        "MPPT": "ag_level_0",
        "Inv": "ag_level_1",
    }, "The aggregation levels are not correct as dataframe read from its helper function"


def test_check_columns_and_assign_aggregation_levels_with_invalid_inputs_columns(
    caplog,
):
    """
    Test the 'check_columns_and_assign_aggregation_levels' method of the
    'TimestreamPivotTransformer' class with invalid input columns.

    This function tests the 'check_columns_and_assign_aggregation_levels' method
    of the 'TimestreamPivotTransformer' class by creating a valid dataframe from
    Timestream, dropping all the input columns to make the dataframe invalid,
    creating an instance of the 'TimestreamPivotTransformer' class using the
    dataframe, calling the 'check_columns_and_assign_aggregation_levels' method
    on the transformer object, and asserting the warning messages logged.

    Parameters:
    -----------
    - caplog: The fixture for capturing log messages

    Returns:
    --------
    None
    """
    # Create a valid dataframe from Timestream
    dataframe = read_valid_dataframe_from_timestream()

    # Dropping all the input columns to make the dataframe invalid
    dataframe.drop(columns=["MPPT"], inplace=True, axis=1)
    dataframe.drop(columns=["Inv"], inplace=True, axis=1)

    # Create an instance of the 'TimestreamPivotTransformer' class using the dataframe
    transformer = TimestreamPivotTransformer(dataframe)

    # Call the 'check_columns_and_assign_aggregation_levels' method on the transformer object
    with caplog.at_level(logging.WARNING):
        transformer._check_columns_and_assign_aggregation_levels()

    # Assert the warning messages logged
    assert (
        caplog.messages[0]
        == "Column String does not exist in the DataFrame or contains empty values."
    )
    assert (
        caplog.messages[1]
        == "Column CB does not exist in the DataFrame or contains empty values."
    )
    assert (
        caplog.messages[2]
        == "Column MPPT does not exist in the DataFrame or contains empty values."
    )
    assert (
        caplog.messages[3]
        == "Column Inv does not exist in the DataFrame or contains empty values."
    )


def test_rename_columns_based_on_levels_with_correctly_renamed_columns():
    """
    Test the '_rename_columns_based_on_levels' method of the 'TimestreamPivotTransformer' class
    with correctly renamed columns.

    This function tests the '_rename_columns_based_on_levels' method of the 'TimestreamPivotTransformer'
    class by creating a valid dataframe from Timestream, creating an instance of the 'TimestreamPivotTransformer'
    class using the dataframe, calling the '_rename_columns_based_on_levels' method on the transformer object,
    and asserting that the column names are correctly renamed.

    Parameters:
    --------
    None

    Returns:
    -------
    None
    """
    # Create a valid dataframe from Timestream
    dataframe = read_valid_dataframe_from_timestream()

    # Create an instance of the 'TimestreamPivotTransformer' class using the dataframe
    transformer = TimestreamPivotTransformer(dataframe)

    # Call the '_rename_columns_based_on_levels' method on the transformer object
    renamed_transformed_data = transformer._rename_columns_based_on_levels()

    # Assert that the column names are correctly renamed
    assert {"ag_level_0", "ag_level_1"}.issubset(
        renamed_transformed_data.columns.tolist()
    ), "Column names are not correctly renamed"


def test_pivot_table():
    """
    Test the '_pivot_data' method of the 'TimestreamPivotTransformer' class with
    not renamed column names.

    This function tests the '_pivot_data' method of the 'TimestreamPivotTransformer'
    class by creating a valid dataframe from Timestream, creating an instance of the
    'TimestreamPivotTransformer' class using the dataframe, calling the '_pivot_data'
    method on the transformer object with the 'inv_col_names', and asserting that the
    'pivoted' variable is None.

    Parameters:
    ----------
    None

    Returns:
    ------
    None
    """
    # Create a valid dataframe from Timestream
    dataframe = read_valid_dataframe_from_timestream()

    # Create an instance of the 'TimestreamPivotTransformer' class using the dataframe
    transformer = TimestreamPivotTransformer(dataframe)

    pivoted = None
    with pytest.raises(AttributeError):
        # Call the '_pivot_data' method on the transformer object with 'inv_col_names'
        pivoted = transformer._pivot_data(transformer.inv_col_names)

    # Assert that the 'pivoted' variable is None
    assert (
        pivoted is None
    ), "pivoted data function works well in case of without renaming the column names."


def test_transform_function_of_the_module_with_valid_input(caplog):
    """
    Test the 'transform' function of the module with valid input.

    This function tests the 'transform' function of the module by creating a valid
    dataframe from Timestream, creating an instance of the 'TimestreamPivotTransformer'
    class using the dataframe, calling the 'transform' function on the transformer object,
    and asserting that the inverter data and meteorological data are generated properly,
    and the log message is correct.

    Parameters:
    ----------
    - caplog: The fixture for capturing log messages

    Returns:
    -------
    None
    """
    # Create a valid dataframe from Timestream
    dataframe = read_valid_dataframe_from_timestream()

    # Create an instance of the 'TimestreamPivotTransformer' class using the dataframe
    transformer = TimestreamPivotTransformer(dataframe)

    # Call the 'transform' function on the transformer object
    with caplog.at_level(logging.INFO):
        inverter_data, meteo_data = transformer.transform()

    # Assert that the inverter data is generated properly
    assert inverter_data is not None, "The inverter data is not generated properly"

    # Assert that the meteorological data is generated properly
    assert meteo_data is not None, "The meteorological data is not generated properly"

    # Assert that the log message is correct
    assert (
        caplog.messages[-1] == "Data transformation completed."
    ), "The log message is not correct"
