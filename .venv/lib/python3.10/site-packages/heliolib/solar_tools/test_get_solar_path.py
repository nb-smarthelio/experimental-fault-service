import pandas as pd
import pytest

from heliolib.solar_tools import GetSolarPath


def test_get_solar_path_initialization_with_invalid_latitude_longitude():
    """
    Test the initialization of the GetSolarPath class with invalid latitude and longitude.

    Parameters:
    -----------
    None

    Returns:
    -----------
    None
    """
    # Check that a ValueError is raised with the expected error message when the latitude is not a float
    with pytest.raises(ValueError) as error:
        GetSolarPath(
            latitude=int(28.613939),
            longitude=77.209023,
            datetime_index=pd.date_range(
                start="2023-12-11", end="2023-12-12", freq="5T", tz="Asia/Kolkata"
            ),
        )
    assert str(error.value) == "Latitude must be a float.", "Latitude is float type."

    # Check that a ValueError is raised with the expected error message when the longitude is not a float
    with pytest.raises(ValueError) as error:
        GetSolarPath(
            latitude=28.613939,
            longitude=int(77.209023),
            datetime_index=pd.date_range(
                start="2023-12-11", end="2023-12-12", freq="5T", tz="Asia/Kolkata"
            ),
        )
    assert str(error.value) == "Longitude must be a float.", "Longitude is float type."

    # Check that a ValueError is raised with the expected error message when the latitude is out of range
    with pytest.raises(ValueError) as error:
        GetSolarPath(
            latitude=-128.613939,
            longitude=77.209023,
            datetime_index=pd.date_range(
                start="2023-12-11", end="2023-12-12", freq="5T", tz="Asia/Kolkata"
            ),
        )
    assert (
        str(error.value) == "Latitude must be between -90 and 90."
    ), "Latitude is between -90 and 90."

    # Check that a ValueError is raised with the expected error message when the longitude is out of range
    with pytest.raises(ValueError) as error:
        GetSolarPath(
            latitude=28.613939,
            longitude=197.209023,
            datetime_index=pd.date_range(
                start="2023-12-11", end="2023-12-12", freq="5T", tz="Asia/Kolkata"
            ),
        )
    assert (
        str(error.value) == "Longitude must be between -180 and 180."
    ), "Longitude is between -180 and 180."


def test_get_solar_path_initialization_with_invalid_datetime_index():
    """
    Test the initialization of the GetSolarPath class with an invalid datetime index.

    Parameters:
    -----------
    None

    Returns:
    -----------
    None
    """
    # Check that a ValueError is raised with the expected error message when the datetime index is empty
    with pytest.raises(ValueError) as error:
        GetSolarPath(
            latitude=28.613939,
            longitude=77.209023,
            datetime_index=pd.DatetimeIndex([]),
        )
    assert str(error.value) == "Index should not be empty"


def test_get_solar_path_initialization_valid():
    """
    Test the initialization of the GetSolarPath class with valid parameters.

    Parameters:
    -----------
    None

    Returns:
    -----------
    None
    """
    # Create an instance of the GetSolarPath class with valid latitude, longitude, and datetime index
    get_solar_object = GetSolarPath(
        latitude=28.613939,
        longitude=77.209023,
        datetime_index=pd.date_range(
            start="2023-12-11", end="2023-12-12", freq="5T", tz="Asia/Kolkata"
        ),
    )

    # Assert that the get_solar_object is an instance of the GetSolarPath class
    assert isinstance(get_solar_object, GetSolarPath)


def test_solar_path_parameter_valid():
    """
    Test the 'solar_path_parameter' method of the GetSolarPath class with valid parameters.

    Parameters:
    -----------
    None

    Returns:
    -----------
    None
    """
    # Create an instance of the GetSolarPath class with valid latitude, longitude, and datetime index
    get_solar_object = GetSolarPath(
        latitude=28.613939,
        longitude=77.209023,
        datetime_index=pd.date_range(
            start="2023-12-11", end="2023-12-12", freq="5T", tz="Asia/Kolkata"
        ),
    )

    # Call the 'solar_path_parameter' method to get the solar path parameter values
    solar_path = get_solar_object.solar_path_parameter()

    # Assert that the latitude and longitude values of the get_solar_object are correct
    assert get_solar_object.latitude == 28.613939
    assert get_solar_object.longitude == 77.209023

    # Assert that the solar path parameter values for a specific datetime are as expected
    solar_path_for_specific_datetime = list(
        map(
            lambda x: round(x, 2),
            solar_path.loc["2023-12-11 00:20:00+05:30", :].values.tolist(),
        )
    )
    assert solar_path_for_specific_datetime == [
        13.85,
        -84.16,
        174.16,
    ], """You are not dealing with these `latitude=28.613939,
        longitude=77.209023,
        datetime_index=pd.date_range(
            start="2023-12-11", end="2023-12-12", freq="5T", tz="Asia/Kolkata"
        )` parameters to create the instance of GetSolarPath"""
