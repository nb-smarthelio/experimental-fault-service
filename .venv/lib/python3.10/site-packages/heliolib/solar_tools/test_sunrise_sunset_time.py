import datetime
import zoneinfo

import pytest
from astral import LocationInfo

from heliolib.solar_tools import SunTimes


def test_sun_times_initialization_with_location_info():
    """
    Test the initialization of the SunTimes class with a LocationInfo object.
    """
    location = LocationInfo(latitude=40.7128, longitude=-74.0060)
    sun_times = SunTimes(location)
    assert sun_times.location.latitude == 40.7128
    assert sun_times.location.longitude == -74.0060


def test_sun_times_initialization_with_invalid_location_info():
    """
    Test the initialization of the SunTimes class with an invalid LocationInfo object.
    """
    with pytest.raises(ValueError) as error:
        SunTimes(location=None)
    assert (
        str(error.value)
        == "location must be an instance of LocationInfo of Astral library."
    )


def test_get_sun_times_with_invalid_timezone():
    """
    Test the 'get_sun_times' method of the SunTimes class with an invalid timezone.
    """
    location = LocationInfo(latitude=40.7128, longitude=-74.0060)
    sun_times = SunTimes(location)
    invalid_timezone = "Invalid"
    with pytest.raises(ValueError) as error:
        sun_times.get_sun_times(
            specific_date=datetime.date(2023, 1, 1),
            return_datetime=True,
            timezone_to_return=invalid_timezone,
        )
    assert str(error.value) == f"Invalid timezone provided: {invalid_timezone}."


def test_get_sun_times_without_providing_date():
    """
    Test the 'get_sun_times' method of the SunTimes class without providing a date.
    """
    location = LocationInfo(latitude=40.7128, longitude=-74.0060)
    sun_times = SunTimes(location)
    sunrise, sunset = sun_times.get_sun_times()
    assert isinstance(sunrise, datetime.time) and isinstance(sunset, datetime.time)


def test_get_sun_times_with_specific_date_return_datetime_true():
    """
    Test the 'get_sun_times' method of the SunTimes class with a specific date and return_datetime=True.
    """
    location = LocationInfo(latitude=40.7128, longitude=-74.0060)
    sun_times = SunTimes(location)
    specific_date = datetime.date(2023, 1, 1)
    sunrise, sunset = sun_times.get_sun_times(
        specific_date=specific_date, return_datetime=True
    )
    assert isinstance(sunrise, datetime.datetime) and isinstance(
        sunset, datetime.datetime
    )


def test_get_sun_times_with_specific_date_return_datetime_false():
    """
    Test the 'get_sun_times' method of the SunTimes class with a specific date and return_datetime=False.
    """
    location = LocationInfo(latitude=40.7128, longitude=-74.0060)
    sun_times = SunTimes(location)
    specific_date = datetime.date(2023, 1, 1)
    sunrise, sunset = sun_times.get_sun_times(
        specific_date=specific_date, return_datetime=False
    )
    assert isinstance(sunrise, datetime.time) and isinstance(sunset, datetime.time)


def test_get_sun_times_with_specific_date_and_custom_timezone():
    """
    Test the 'get_sun_times' method of the SunTimes class with a specific date and custom timezone.
    """
    location = LocationInfo(latitude=40.7128, longitude=-74.0060)
    sun_times = SunTimes(location)
    specific_date = datetime.date(2023, 1, 1)
    timezone = "America/New_York"
    sunrise, sunset = sun_times.get_sun_times(
        specific_date=specific_date, return_datetime=True, timezone_to_return=timezone
    )
    assert isinstance(sunrise, datetime.datetime) and isinstance(
        sunset, datetime.datetime
    )
    assert sunrise.tzinfo is not None and sunset.tzinfo is not None
    assert sunrise.tzinfo.utcoffset(sunrise) == datetime.timedelta(
        seconds=-18000
    ) and sunset.tzinfo.utcoffset(sunset) == datetime.timedelta(seconds=-18000)


def test_get_sun_times_with_default_timezone():
    """
    Test the 'get_sun_times' method with a specific date using the default timezone.
    """
    location = LocationInfo(latitude=40.7128, longitude=-74.0060)
    sun_times = SunTimes(location)
    specific_date = datetime.date(2023, 1, 1)
    sunrise, sunset = sun_times.get_sun_times(
        specific_date=specific_date, return_datetime=True
    )
    assert isinstance(sunrise, datetime.datetime) and isinstance(
        sunset, datetime.datetime
    )
    assert sunrise.tzinfo is not None and sunset.tzinfo is not None
    assert sunrise.tzinfo.utcoffset(sunrise) == datetime.timedelta(
        0
    ) and sunset.tzinfo.utcoffset(sunset) == datetime.timedelta(0)


def test_get_sun_times_with_custom_timezone_return_datetime_false():
    """
    Test the 'get_sun_times' method of the SunTimes class with a custom timezone and return_datetime=False.
    """
    location = LocationInfo(latitude=40.7128, longitude=-74.0060)
    sun_times = SunTimes(location)
    specific_date = datetime.date(2023, 1, 1)
    timezone = "America/New_York"
    sunrise, sunset = sun_times.get_sun_times(
        specific_date=specific_date, return_datetime=False, timezone_to_return=timezone
    )
    assert isinstance(sunrise, datetime.time) and isinstance(sunset, datetime.time)
    assert sunrise.tzinfo is not None and sunset.tzinfo is not None
    assert sunrise.tzinfo == sunset.tzinfo
    assert sunrise.tzinfo == zoneinfo.ZoneInfo(key="America/New_York")
