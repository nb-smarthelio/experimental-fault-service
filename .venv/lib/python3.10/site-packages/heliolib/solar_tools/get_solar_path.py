from pvlib import solarposition
import pandas as pd
import logging

logger = logging.getLogger(__name__)


class GetSolarPath:
    """
    GetSolarPath class is designed to calculate solar position parameters (azimuth, elevation, zenith)
    based on the provided latitude, longitude, and datetime index using the pvlib library.

    Parameters:
    -----------
    latitude: float
        Latitude of the location in decimal degrees.
    longitude: float
        Longitude of the location in decimal degrees.
    datetime_index: pd.DatetimeIndex
        Datetime index for which solar position parameters are to be calculated.

    Raises:
    -------
    ValueError: If latitude or longitude is not a float, or if latitude is not between -90 and 90 degrees,
      or if longitude is not between -180 and 180 degrees, or if the datetime_index is empty.

    Method
    -----
    solar_path_parameter: pandas.DataFrame
        On this method call it will return pandas.DataFrame of Azimuth, Zenith and Elevation.

    Examples:
    ---------
        INPUT:-
                ## Datetime Index with timezone aware
                datetime_asia_kolkata = pd.date_range(start='2023-12-11', end='2023-12-12', freq='5T', tz='Asia/Kolkata')
                ## Object of the GetSolarPath
                object = GetSolarPath(latitude=28.613939, longitude=77.209023, datetime_index=datetime_asia_kolkata)
        OUTPUT:-
                | datetime                | azimuth   | elevation  | zenith     |
                |-------------------------|-----------|------------|------------|
                | 2023-12-11 00:00:00+05:30 | 330.318709| -83.513521 | 173.513521 |
                | 2023-12-11 00:05:00+05:30 | 340.007818| -83.976017 | 173.976017 |
                | 2023-12-11 00:10:00+05:30 | 350.920119| -84.252760 | 174.252760 |
                | 2023-12-11 00:15:00+05:30 | 2.477379  | -84.316526 | 174.316526 |
                | 2023-12-11 00:20:00+05:30 | 13.853868 | -84.160331 | 174.160331 |
    """

    def __init__(
        self, latitude: float, longitude: float, datetime_index: pd.DatetimeIndex
    ) -> None:
        """
        Initializes the GetSolarPath object with provided latitude, longitude, and datetime index.

        Parameters:
        -----------
        latitude: float
            Latitude of the location in decimal degrees.
        longitude: float
            Longitude of the location in decimal degrees.
        datetime_index: pd.DatetimeIndex
            Datetime index for which solar position parameters are to be calculated.

        Raises:
        -------
        ValueError: If latitude or longitude is not a float, or if latitude is not between -90 and 90 degrees,
          or if longitude is not between -180 and 180 degrees, or if the datetime_index is empty.

        Notes:
            You have to give the datetime_index as timezone aware, or it will assume it to UTC.
        """

        if not isinstance(latitude, float):
            raise ValueError("Latitude must be a float.")
        if not isinstance(longitude, float):
            raise ValueError("Longitude must be a float.")

        if not -90 <= latitude <= 90:
            raise ValueError("Latitude must be between -90 and 90.")
        if not -180 <= longitude <= 180:
            raise ValueError("Longitude must be between -180 and 180.")

        if datetime_index.empty:
            raise ValueError("Index should not be empty")

        if datetime_index.tz is None:
            logger.info("The passed datetime index is timezone naive.")
        else:
            logger.info(f"The passed datetime index {str(datetime_index.tz)}.")

        self.latitude = latitude
        self.longitude = longitude
        self.datetime_index = datetime_index

    def solar_path_parameter(self) -> pd.DataFrame:
        """
        Calculates solar position parameters (azimuth, elevation, zenith) for the stored datetime index,
        latitude, and longitude.

        Returns:
        --------
        pd.DataFrame: Solar position parameters (azimuth, elevation, zenith) for each timestamp
        in the datetime index.
        """

        object_solarpath = solarposition.get_solarposition(
            time=self.datetime_index, latitude=self.latitude, longitude=self.longitude
        )

        return object_solarpath[["azimuth", "elevation", "zenith"]]
