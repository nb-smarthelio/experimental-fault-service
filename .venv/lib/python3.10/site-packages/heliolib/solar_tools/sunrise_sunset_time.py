import logging
from datetime import date

import pytz
from astral import LocationInfo
from astral.sun import sunrise, sunset

logger = logging.getLogger(__name__)


class SunTimes:
    """
    A class to calculate the sunrise and sunset times for a given location.

    The SunTimes class uses astral's LocationInfo and sun functions to determine
    sunrise and sunset times based on the provided geographical coordinates.
    It handles both specific date queries and defaults to the current date if none is provided.

    Parameters:
    -----------
    location (LocationInfo):
        An astral LocationInfo object representing the geographical location.

    Methods:
    --------
    get_sun_times(specific_date=None, return_datetime=False, timezone_to_return=None):
        Returns the sunrise and sunset times as timezone aware python datetime or time object.

    Example:
    --------
    # Initialize with a LocationInfo object
    location = LocationInfo(latitude=40.7128, longitude=-74.0060)
    sun_times = SunTimes(location)

    # Get today's sunrise and sunset times
    sunrise, sunset = sun_times.get_sun_times()

    # Get sunrise and sunset for a specific date
    specific_date = date(2023, 1, 1)
    sunrise, sunset = sun_times.get_sun_times(specific_date=specific_date)
    """

    DEFAULT_TIMEZONE = "UTC"

    def __init__(self, location: LocationInfo) -> None:
        """
        Constructs all the necessary attributes for the SunTimes object.

        Parameters:
        -----------
        location: LocationInfo
            An instance of LocationInfo representing the geographical location.

        Example:
        --------
        # Example to initialize for Paris coordinates
        paris_location = LocationInfo(latitude=48.8566, longitude=2.3522)
        paris_sun_times = SunTimes(location=paris_location)
        print("SunTimes object created for Paris.")
        """
        if not isinstance(location, LocationInfo):
            raise ValueError(
                "location must be an instance of LocationInfo of Astral library."
            )

        self.location = location
        self.default_timezone = pytz.timezone(self.DEFAULT_TIMEZONE)

    def get_sun_times(
        self,
        specific_date: date = None,
        return_datetime: bool = False,
        timezone_to_return: str = None,
    ) -> tuple:
        """
        Get the sunrise and sunset times for either the current date or a specified date.

        Parameters:
        -----------
        specific_date: datetime.date, optional
            A datetime.date object representing the specific date.
            If not provided, the current date is used.
        return_datetime: bool, optional
            Flag to determine the format of the returned times.
            If True, returns the times as 'YYYY-MM-DD HH:MM:SS+<UTC offset>'.
            If False, returns the times as 'HH:MM:SS+<UTC offset>'.
        timezone_to_return: str, optional
            The timezone to return the times in. Defaults to 'UTC'.
            e.g. 'America/New_York', 'Europe/London', 'Asia/Kolkata'.

        Returns:
        --------
        tuple:
            A tuple containing the sunrise and sunset times as timezone aware python datetime or time object.
            e.g. (datetime.datetime, datetime.datetime) or (datetime.time, datetime.time)

        Raises:
        -------
        ValueError:
            If the specific_date is not a datetime.date object.
        Exception:
            If there's an error in calculating sunrise and sunset times.

        Example:
        --------
        # Example usage for getting times for London on a specific date
        london_location = LocationInfo(latitude=51.5074, longitude=-0.1278)
        london_sun_times = SunTimes(location=london_location)
        specific_date = date(2023, 6, 21)
        sunrise, sunset = london_sun_times.get_sun_times(specific_date=specific_date)

        # Example usage with return_datetime flag
        sunrise, sunset = london_sun_times.get_sun_times(specific_date=specific_date, return_datetime=True)

        # Example usage with timezone_to_return flag
        sunrise, sunset = london_sun_times.get_sun_times(specific_date=specific_date, timezone_to_return="Europe/London")
        """
        if specific_date and not isinstance(specific_date, date):
            raise ValueError("specific_date must be a datetime.date object.")

        if not specific_date:
            logger.warning("Specific date not provided. Defaulting to current date.")
            specific_date = date.today()

        # check if provided timezone is valid
        if timezone_to_return and timezone_to_return not in pytz.all_timezones:
            raise ValueError(f"Invalid timezone provided: {timezone_to_return}.")
        if not timezone_to_return:
            timezone_to_return = self.default_timezone
            logging.warning(
                f"Timezone not provided. Defaulting to {self.default_timezone}."
            )
        try:
            sun_rise = sunrise(
                self.location.observer, date=specific_date, tzinfo=timezone_to_return
            )
            sun_set = sunset(
                self.location.observer, date=specific_date, tzinfo=timezone_to_return
            )
            if return_datetime:
                logger.debug("Returning sunrise and sunset times as datetime objects.")
                # Return python datetime object with timezone info as UTC offset
                sunrise_time = sun_rise.replace(second=0, microsecond=0)
                sunset_time = sun_set.replace(second=0, microsecond=0)
            else:
                logger.debug("Returning sunrise and sunset times as time objects.")
                # Return python time object with timezone info as UTC offset
                sunrise_time = sun_rise.timetz().replace(second=0, microsecond=0)
                sunset_time = sun_set.timetz().replace(second=0, microsecond=0)
        except Exception as e:
            raise Exception("Error getting sunrise and sunset times:", e)

        return sunrise_time, sunset_time
