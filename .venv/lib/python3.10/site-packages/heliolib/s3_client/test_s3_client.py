from io import BytesIO, StringIO
from unittest.mock import MagicMock

import pandas as pd
import pytest
from botocore.exceptions import ClientError

from .s3_client import S3Client


@pytest.fixture
def s3_client():
    mock_s3_client = MagicMock()
    return mock_s3_client


def test_initialization_s3_client_raises_with_invalid_bucket_name_type(s3_client):
    invalid_bucket_name = 123
    with pytest.raises(TypeError) as e:
        S3Client(invalid_bucket_name, s3_client)
        assert "bucket_name must be a string." in str(e.value)


def test_validate_bucket_exists_raises_with_non_existent_bucket(s3_client):
    bucket_name = "non-existent-bucket"
    s3_client.head_bucket.side_effect = ClientError(
        {"Error": {"Code": "404"}}, "head_bucket"
    )
    with pytest.raises(ValueError) as e:
        S3Client(bucket_name, s3_client)
    assert str(e.value) == f"Bucket {bucket_name} does not exist."


def test_validate_bucket_exists_raises_with_private_bucket(s3_client):
    bucket_name = "private-bucket"
    s3_client.head_bucket.side_effect = ClientError(
        {"Error": {"Code": "403"}}, "head_bucket"
    )
    with pytest.raises(ValueError) as e:
        S3Client(bucket_name, s3_client)
    assert str(e.value) == f"Bucket {bucket_name} is private. Forbidden access."


def test_initialization_s3_client_passes_with_valid_input(s3_client):
    bucket_name = "test-bucket"
    s3_client.list_buckets.return_value = {
        "Buckets": [{"Name": "test-bucket"}, {"Name": "other-bucket"}]
    }
    s3_client_object = S3Client(bucket_name, s3_client)
    assert s3_client_object.bucket_name == bucket_name


def test_read_object_raises_file_not_found_error(s3_client):
    bucket_name = "test-bucket"
    s3_client.list_buckets.return_value = {
        "Buckets": [{"Name": "test-bucket"}, {"Name": "other-bucket"}]
    }
    file_key = "non-existent-file"
    error_response = {
        "Error": {"Code": "NoSuchKey", "Message": "The specified key does not exist."}
    }
    s3_client.get_object.side_effect = ClientError(error_response, "get_object")

    s3_client_object = S3Client(bucket_name, s3_client)

    # Act and Assert
    with pytest.raises(FileNotFoundError) as e:
        s3_client_object.read_object(file_key)
    assert str(e.value) == f"File {file_key} not found in the bucket {bucket_name}."


def test_read_object_raises_generic_error(s3_client):
    bucket_name = "test-bucket"
    s3_client.list_buckets.return_value = {
        "Buckets": [{"Name": "test-bucket"}, {"Name": "other-bucket"}]
    }
    file_key = "non-existent-file"
    error_response = {
        "Error": {"Code": "GenericError", "Message": "A generic error occurred."}
    }
    s3_client.get_object.side_effect = ClientError(error_response, "get_object")

    s3_client_object = S3Client(bucket_name, s3_client)

    # Act and Assert
    with pytest.raises(ClientError):
        s3_client_object.read_object(file_key)


def test_read_object_passes_with_valid_input(s3_client):
    bucket_name = "test-bucket"
    s3_client.list_buckets.return_value = {
        "Buckets": [{"Name": "test-bucket"}, {"Name": "other-bucket"}]
    }
    file_key = "test-file"
    s3_client.get_object.return_value = {"Body": BytesIO(b"test-body")}

    s3_client_object = S3Client(bucket_name, s3_client)

    # Act
    result = s3_client_object.read_object(file_key)

    # Assert
    s3_client.get_object.assert_called_with(Bucket=bucket_name, Key=file_key)
    assert BytesIO(result).read() == b"test-body"


def test_write_object(s3_client):
    s3_client.list_buckets.return_value = {
        "Buckets": [{"Name": "test-bucket"}, {"Name": "other-bucket"}]
    }
    bucket_name = "test-bucket"
    file_key = "test-file"
    content = StringIO("test-content")
    s3_client_object = S3Client(bucket_name, s3_client)
    s3_client_object.write_object(content, file_key)

    # Assert
    s3_client.put_object.assert_called_with(
        Bucket=bucket_name, Body=content.getvalue(), Key=file_key
    )


def test_save_pandas_dataframe(s3_client):
    s3_client.list_buckets.return_value = {
        "Buckets": [{"Name": "test-bucket"}, {"Name": "other-bucket"}]
    }
    bucket_name = "test-bucket"
    file_key = "test-file"
    dataframe = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
    s3_client_object = S3Client(bucket_name, s3_client)
    s3_client_object.save_pandas_dataframe(dataframe, file_key)
    s3_client.put_object.assert_called_once()
    args, kwargs = s3_client.put_object.call_args
    assert kwargs["Bucket"] == bucket_name
    assert kwargs["Key"] == file_key
    assert isinstance(kwargs["Body"], str)
