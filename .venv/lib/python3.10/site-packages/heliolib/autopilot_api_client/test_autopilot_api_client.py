import pandas as pd
import pytest

from heliolib.autopilot_api_client import AutopilotAPIClient
from heliolib.utils import retry_api_session

URL = "http//www.fakeurl.com"


def create_fault_dataframe_for_testing(data_type):
    if data_type == "valid_data":
        # Sample data for testing
        valid_data = pd.DataFrame(
            {
                "plant_id": ["plant1"],
                "fault_name": ["Fault A"],
                "inverter_id": ["inv1"],
            }
        )
        return valid_data

    if data_type == "invalid_data":
        invalid_data_type = pd.DataFrame(
            {
                "plant_id": [123],  # Should be a string
                "fault_name": [789],  # Should be a string
                "inverter_id": [101112],  # Should be a string
            }
        )
        return invalid_data_type

    if data_type == "missing_columns":
        missing_column_data = pd.DataFrame(
            {"fault_name": ["Fault A"], "inverter_id": ["inv1"]}
        )
        return missing_column_data


def test_validate_fault_data_with_valid_columns():
    # Test with valid fault data
    test_data = create_fault_dataframe_for_testing(data_type="valid_data")

    try:
        session = retry_api_session(URL, allowed_request_type=["POST"])
        api_client = AutopilotAPIClient(URL, session)
        api_client._validate_fault_data(test_data)
    except Exception as e:
        raise f"Unexpected exception raised: {e}"


def test_validate_fault_data_with_invalid_type():
    # Test with invalid data types
    test_data = create_fault_dataframe_for_testing(data_type="invalid_data")

    with pytest.raises(TypeError) as error:
        session = retry_api_session(URL, allowed_request_type=["POST"])
        api_client = AutopilotAPIClient(URL, session)
        api_client._validate_fault_data(test_data)
        assert str(error.value) == 'Parameter "plant_id" must be a string'


def test_validate_fault_data_with_missing_column():
    # Test with missing column
    test_data = create_fault_dataframe_for_testing(data_type="missing_columns")

    with pytest.raises(KeyError) as error:
        session = retry_api_session(URL, allowed_request_type=["POST"])
        api_client = AutopilotAPIClient(URL, session)
        api_client._validate_fault_data(test_data)
        assert str(error.value) == 'Parameter "plant_id" must be a provided'
