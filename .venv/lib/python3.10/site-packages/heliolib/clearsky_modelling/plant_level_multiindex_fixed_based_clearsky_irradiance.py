import pandas as pd
import logging

logger = logging.getLogger(__name__)


class MultiindexFixedClearskyIrradianceGenerator:
    """
    A class for generating multi-index clearsky irradiance data for a solar array.

    Parameters
    ----------
    array_info (pd.DataFrame):
        DataFrame containing solar array information.
    latitude (float):
        Latitude of the location.
    longitude (float):
        Longitude of the location.
    altitude (float):
        Altitude of the location.
    timezone (str):
        Timezone of the location.
    times (pd.DatetimeIndex):
        Datetime index for which clearsky irradiance is calculated.

    Methods
    -------
    _validate_array_info() -> None:
        Validate the array information for surface tilt and azimuth values.

    _extract_unique_fixed_orientations_from_array_info() -> List[Tuple[float, float]]:
        Extract unique surface tilt and azimuth orientations from the array information.

    _extract_clearsky_irradiance_for_fixed_unique_orientations(fixed_unique_orientations: List[Tuple[float, float]]) -> pd.DataFrame:
        Extract clearsky irradiance data for each unique orientation.

    _align_clearsky_curves_with_inputs(unique_clearsky_curves: pd.DataFrame) -> pd.DataFrame:
        Align the clearsky irradiance curves with the array information inputs.

    generate_multiindex_fixed_clearsky_irradiance() -> pd.DataFrame:
        Generate multi-index clearsky irradiance data for the solar array.
    """

    def __init__(self, array_info, location_based_clearsky_object) -> None:
        """
        Initialize the MultiindexClearskyIrradianceGenerator.

        Parameters
        ----------
        array_info : pd.DataFrame
            DataFrame containing solar array information, such as surface tilt and azimuth angles for each array.
        location_based_clearsky_object : LocationBasedClearskyIrradiance
            An instance of the LocationBasedClearskyIrradiance class that provides clearsky irradiance data
            based on the location parameters.
        """
        self.array_info = array_info
        self.location_based_clearsky_object = location_based_clearsky_object

    def _validate_array_info(self) -> None:
        """
        Validate that the given values in columns surface_tilt and surface_azimuth in
        array_info are neither NaN nor zero.

        Raises
        ------
        ValueError:
            If any value is NaN in columns "surface_azimuth" and "surface_tilt" in the array_info data.
        """
        if self.array_info["surface_tilt"].isna().any():
            raise ValueError(
                f"The values for *Surface Tilt* in Array Info cannot be NaN."
            )

        if self.array_info["surface_azimuth"].isna().any():
            raise ValueError(
                f"The values for *Surface Azimuth* in Array Info cannot be NaN."
            )

    def _extract_unique_fixed_orientations_from_array_info(
        self,
    ) -> list[tuple[float, float]]:
        """
        Extract unique orientations from array_info.

        Returns
        -------
        list[tuple[float, float]]:
            A list of unique orientations, where each orientation is a tuple (surface_tilt, surface_azimuth).
        """
        all_orientations = list(
            zip(self.array_info["surface_tilt"], self.array_info["surface_azimuth"])
        )
        unique_orientations_list = list(set(all_orientations))
        return unique_orientations_list

    def _extract_clearsky_irradiance_for_fixed_unique_orientations(
        self, fixed_unique_orientations: list[tuple[float, float]]
    ) -> pd.DataFrame:
        """
        Extract clearsky irradiance for unique orientations.

        Parameters
        ----------
        fixed_unique_orientations : List[Tuple[float, float]]
            List of unique orientations where each orientation is a tuple (surface_tilt, surface_azimuth).

        Returns
        -------
        pd.DataFrame:
            A dataframe with clearsky irradiance for each unique orientation.
        """
        unique_single_axis_tracker_clearsky_curves = pd.DataFrame()
        for orientation in fixed_unique_orientations:
            tilt = float(orientation[0])
            azimuth = float(orientation[1])
            poa_clearsky_parameters = (
                self.location_based_clearsky_object.get_clearsky_poa(tilt, azimuth)
            )
            unique_single_axis_tracker_clearsky_curves[
                f"Gcsky_{str(tilt)}_{str(azimuth)}"
            ] = poa_clearsky_parameters[["poa_global"]]

        return unique_single_axis_tracker_clearsky_curves

    def _align_clearsky_curves_with_inputs(
        self, unique_clearsky_curves: pd.DataFrame
    ) -> pd.DataFrame:
        """
        Align clearsky irradiance with inputs.

        Parameters
        ----------
        unique_clearsky_curves (pd.DataFrame):
            Clearsky irradiance data for unique orientations.

        Returns
        -------
        pd.DataFrame:
            A multi-index DataFrame with clearsky irradiance aligned with the input array information.
        """
        clearsky_multiindex_dataframe = pd.DataFrame()
        for index, row in self.array_info.iterrows():
            input_tilt = float(row["surface_tilt"])
            input_azimuth = float(row["surface_azimuth"])

            # Convert index to tuple if it's not already
            column_index = (index,) if not isinstance(index, tuple) else index
            # Append "Gcsky" to the column index tuple
            column_index = column_index + ("Gcsky",)

            clearsky_multiindex_dataframe[column_index] = unique_clearsky_curves[
                [f"Gcsky_{str(input_tilt)}_{str(input_azimuth)}"]
            ]

        clearsky_multiindex_dataframe.columns = pd.MultiIndex.from_tuples(
            clearsky_multiindex_dataframe.columns,
            names=list(self.array_info.index.names) + ["curve"],
        )

        return clearsky_multiindex_dataframe

    def generate_multiindex_fixed_clearsky_irradiance(self) -> pd.DataFrame:
        """
        Generate multi-index clearsky irradiance data for the solar array.

        Returns
        -------
        pd.DataFrame:
             A multi-index DataFrame containing clearsky irradiance data for the solar array,
        aligned with the array_info input data.
        """
        try:
            self._validate_array_info()
            unique_orientations = (
                self._extract_unique_fixed_orientations_from_array_info()
            )
            unique_clearsky_irradiance = (
                self._extract_clearsky_irradiance_for_fixed_unique_orientations(
                    unique_orientations
                )
            )

            plant_level_clearsky_irradiance = self._align_clearsky_curves_with_inputs(
                unique_clearsky_irradiance
            )

            return plant_level_clearsky_irradiance

        except Exception as e:
            logger.exception(
                "An error occurred while generating plant level multiindex clearsky dataframe."
            )
            logger.exception(e)
            raise e
