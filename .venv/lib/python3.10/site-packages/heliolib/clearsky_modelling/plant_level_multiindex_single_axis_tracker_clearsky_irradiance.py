import pandas as pd
import logging

logger = logging.getLogger(__name__)

# Assumption: For Clearsky curve GCR is 0. For other values of GCR, PVlib output does not make sense.
GRC_DEFAULT = 0

BACKTRACKING_BOOLEAN = True


class MultiindexSingleAxisTrackerClearskyIrradianceGenerator:
    """
    Generates multi-indexed clearsky irradiance data for a single-axis solar tracker system.

    This class calculates and organizes clearsky irradiance data based on various orientations of
    single-axis solar trackers using input array information and a location-based clearsky model.

    Parameters
    ----------
    array_info : pd.DataFrame
        DataFrame containing information about the solar arrays, including axis tilt, axis azimuth,
        and phi angle for each array configuration.
    location_based_single_axis_clearsky_object : LocationBasedSingleAxisTrackerClearskyIrradiance
        Object that provides clearsky irradiance data based on location-specific parameters.

    Attributes
    ----------
    array_info : pd.DataFrame
        The DataFrame containing information about the solar arrays.
    location_based_single_axis_clearsky_object : LocationBasedSingleAxisTrackerClearskyIrradiance
        The clearsky irradiance model specific to the location.

    Methods
    -------
    _validate_array_info() -> None:
        Validates the array_info DataFrame to ensure it does not contain NaN values for critical parameters.

    _extract_unique_tracker_parameters_from_array_info() -> List[Tuple[float, float, float]]:
        Extract unique tracker orientation parameters from the array_info DataFrame.

    _extract_single_axis_tracker_clearsky_unique_parameters(unique_tracker_parameters: List[Tuple[float, float, float]]) -> pd.DataFrame:
        Extract clearsky irradiance data for unique tracker orientations.

    _align_clearsky_curves_with_inputs(unique_single_axis_clearsky_curves: pd.DataFrame) -> pd.DataFrame:
        Align clearsky irradiance curves with input array configurations.

    generate_multiindex_tracker_clearsky_irradiance() -> pd.DataFrame:
        Generates multi-indexed clearsky irradiance data for the entire solar plant.
    """

    def __init__(
        self, array_info: pd.DataFrame, location_based_single_axis_clearsky_object
    ) -> None:
        """
        Initializes the MultiindexSingleAxisTrackerClearskyIrradianceGenerator instance.

        Parameters
        ----------
        array_info : pd.DataFrame
            DataFrame containing information about the solar arrays, including axis tilt, axis azimuth, and phi angle.
        location_based_single_axis_clearsky_object : LocationBasedSingleAxisTrackerClearskyIrradiance
            Object that provides clearsky irradiance data based on location-specific parameters.
        """

        self.array_info = array_info
        self.location_based_single_axis_clearsky_object = (
            location_based_single_axis_clearsky_object
        )

    def _validate_array_info(self) -> None:
        """
        Validates the array_info DataFrame to ensure it does not contain NaN values for critical parameters.

        Raises
        ------
        ValueError
            If array_info contains NaN values for axis tilt, axis azimuth, or phi angle.
        """

        if self.array_info["axis_tilt"].isna().any():
            raise ValueError(f"The values for *Axis Tilt* in Array Info cannot be NaN.")

        if self.array_info["axis_azimuth"].isna().any():
            raise ValueError(
                f"The values for *Axis Azimuth* in Array Info cannot be NaN."
            )

        if self.array_info["phi_angle"].isna().any():
            raise ValueError(f"The values for *Phi Angle* in Array Info cannot be NaN.")

    def _extract_unique_tracker_parameters_from_array_info(
        self,
    ) -> list[tuple[float, float, float]]:
        """
        Extracts unique tracker orientation parameters from the array_info DataFrame.

        Returns
        -------
        list[tuple[float, float, float]]
            A list of unique orientation parameter tuples (axis_tilt, axis_azimuth, phi_angle).
        """

        all_params = list(
            zip(
                self.array_info["axis_tilt"],
                self.array_info["axis_azimuth"],
                self.array_info["phi_angle"],
            )
        )
        unique_orientations_list = list(set(all_params))
        return unique_orientations_list

    def _extract_single_axis_tracker_clearsky_unique_parameters(
        self, unique_tracker_parameters: list[tuple[float, float, float]]
    ) -> pd.DataFrame:
        """
        Extract clearsky irradiance data for unique tracker orientations.

        Parameters
        ----------
        unique_tracker_parameters : List[Tuple[float, float, float]]
            A list of unique orientation parameter tuples (axis_tilt, axis_azimuth, phi_angle).

        Returns
        -------
        pd.DataFrame
            A DataFrame containing clearsky irradiance data for unique tracker orientations.
        """

        unique_single_axis_clearsky_curves = pd.DataFrame()
        for parameters in unique_tracker_parameters:
            axis_tilt = float(parameters[0])
            axis_azimuth = float(parameters[1])
            phi_angle = float(parameters[2])
            max_angle = (-phi_angle, phi_angle)
            backtrack = BACKTRACKING_BOOLEAN
            gcr = GRC_DEFAULT
            poa_clearsky_parameters = self.location_based_single_axis_clearsky_object.get_clearsky_poa_for_tracker(
                axis_tilt, axis_azimuth, max_angle, backtrack, gcr
            )
            unique_single_axis_clearsky_curves[
                f"Gcsky_{str(axis_tilt)}_{str(axis_azimuth)}_{str(phi_angle)}"
            ] = poa_clearsky_parameters[["csky_POA"]]

        return unique_single_axis_clearsky_curves

    def _align_clearsky_curves_with_inputs(
        self, unique_single_axis_clearsky_curves: pd.DataFrame
    ) -> pd.DataFrame:
        """
        Aligns clearsky irradiance curves with input array configurations.

        Parameters
        ----------
        unique_single_axis_clearsky_curves : pd.DataFrame
            Clearsky irradiance data for unique tracker orientations.

        Returns
        -------
        pd.DataFrame
            A multi-indexed DataFrame containing clearsky irradiance data aligned with input array configurations.
        """
        clearsky_multiindex_dataframe = pd.DataFrame()
        for index, row in self.array_info.iterrows():
            axis_tilt = float(row["axis_tilt"])
            axis_azimuth = float(row["axis_azimuth"])
            max_angle = float(row["phi_angle"])

            # Convert index to tuple if it's not already
            column_index = (index,) if not isinstance(index, tuple) else index
            # Append "Gcsky" to the column index tuple
            column_index = column_index + ("Gcsky",)

            clearsky_multiindex_dataframe[column_index] = (
                unique_single_axis_clearsky_curves[
                    [f"Gcsky_{str(axis_tilt)}_{str(axis_azimuth)}_{str(max_angle)}"]
                ]
            )

        clearsky_multiindex_dataframe.columns = pd.MultiIndex.from_tuples(
            clearsky_multiindex_dataframe.columns,
            names=list(self.array_info.index.names) + ["curve"],
        )

        return clearsky_multiindex_dataframe

    def generate_multiindex_tracker_clearsky_irradiance(self) -> pd.DataFrame:
        """
        Generates multi-indexed clearsky irradiance data for the entire solar plant.

        This method orchestrates the generation of clearsky irradiance data for various solar tracker
        orientations based on the provided array information and location-based clearsky model. The
        generated data is organized into a multi-indexed DataFrame for further analysis.

        Returns
        -------
        pd.DataFrame
            A multi-indexed DataFrame containing clearsky irradiance data aligned with input array configurations.

        Raises
        ------
        Exception
            If any exception occurs during the generation process, it is logged, and the original exception is re-raised.
        """

        try:
            self._validate_array_info()
            unique_orientations = (
                self._extract_unique_tracker_parameters_from_array_info()
            )
            unique_clearsky_irradiance = (
                self._extract_single_axis_tracker_clearsky_unique_parameters(
                    unique_orientations
                )
            )

            plant_level_clearsky_irradiance = self._align_clearsky_curves_with_inputs(
                unique_clearsky_irradiance
            )

            return plant_level_clearsky_irradiance

        except Exception as e:
            logger.exception(
                "An error occurred while generating plant level multiindex clearsky dataframe."
            )
            logger.exception(e)
            raise e
