import pvlib
import pandas as pd
from pvlib.tools import cosd
from pvlib.irradiance import get_total_irradiance

from heliolib.clearsky_modelling.location_based_clearsky_irradiance import (
    LocationBasedClearskyIrradiance,
)


class LocationBasedSingleAxisTrackerClearskyIrradiance:
    """
    A subclass of Clearsky for calculating clear sky irradiance parameters
    specifically tailored for a single-axis tracker configuration in both LAT/UTC times.

    Inherits from Clearsky to utilize its methods for clear sky calculations.

    Parameters
    ----------
    location_based_clearsky_irradiance (class):
        LocationBasedClearskyIrradiance
    times (pandas.DatetimeIndex):
        Datetime index specifying the times for which to calculate the parameters. Works
        for both LAT and UTC times.

    Methods
    -------
    _get_clearsky_curve_for_tracker(axis_tilt, axis_azimuth, max_angle, backtrack, gcr):
        Calculate clear sky curve parameters for a single-axis tracker.

        Parameters
        ----------
        axis_tilt (float):
            Tilt angle of the tracker axis in degrees. Range [0, 90]
        axis_azimuth (float):
            Azimuth angle of the tracker axis in degrees. Range [0, 359]
        max_angle (float):
            Maximum rotation angle of the tracker in degrees. Range [-90,90]
        backtrack (bool):
            Boolean indicating whether the tracker has a backtracking feature. [True/False]
        gcr (float):
            Ground coverage ratio of the tracker. Range [0, 1]

        Returns
        -------
        pandas.DataFrame: DataFrame containing tracker data for each time.

    get_clearsky_poa_for_tracker(axis_tilt, axis_azimuth, max_angle, backtrack, gcr, poa_model='haydavies'):
        Calculate clear sky plane-of-array (POA) irradiance parameters for a single-axis tracker.

        Parameters
        ----------
        axis_tilt (float):
            Tilt angle of the tracker axis in degrees. Range [0, 90]
        axis_azimuth (float):
            Azimuth angle of the tracker axis in degrees. Range [0, 359]
        max_angle (float):
            Maximum rotation angle of the tracker in degrees. Range [-90,90]
        backtrack (bool):
            Boolean indicating whether the tracker has a backtracking feature. [True/False]
        gcr (float):
            Ground coverage ratio of the tracker. Range [0, 1]
        poa_model (str, optional):
            POA irradiance model to use (default is 'haydavies').

        Returns
        -------
        pandas.DataFrame:
            DataFrame containing clear sky POA irradiance for the tracker for each time.
    """

    def __init__(
        self, location_based_clearsky_irradiance: LocationBasedClearskyIrradiance
    ) -> None:
        """
        Initialize the LocationBasedSingleAxisTrackerClearskyIrradiance class.

        Parameters
        ----------
        location_based_clearsky_irradiance (LocationBasedClearskyIrradiance):
            An instance of the LocationBasedClearskyIrradiance class to use for clear sky calculations.
        """
        self.location_based_clearsky_irradiance = location_based_clearsky_irradiance

    @staticmethod
    def _validate_input_variables(
        axis_tilt: float,
        axis_azimuth: float,
        max_angle: tuple[float, float],
        backtrack: bool,
        gcr: float,
        poa_model: str,
    ) -> None:
        """
        Validate the input variables for the tracker.

        Parameters
        ----------
        axis_tilt (float):
            Tilt angle of the tracker axis in degrees. Must be between 0 and 90 degrees.
        axis_azimuth (float):
            Azimuth angle of the tracker axis in degrees. Must be between 0 and 359 degrees.
        max_angle (Tuple[float, float]):
            Maximum rotation angle of the tracker in degrees. Must be within [-90, 90].
        backtrack (bool):
            Indicates whether the tracker uses backtracking. Only accepts True.
        gcr (float):
            Ground coverage ratio of the tracker. Must be between 0 and 1.
        poa_model (str):
            The POA irradiance model to use. Must be one of ['isotropic', 'klucher', 'haydavies', 'reindl', 'king', 'perez'].

        Raises
        ------
        ValueError:
            If any of the input variables are out of range or invalid.
        """
        if not (0 <= axis_tilt <= 90):
            raise ValueError(
                "Invalid Axis-Tilt. Axis-Tilt must be between 0 and 90 degrees."
            )

        if not (0 <= axis_azimuth <= 359):
            raise ValueError(
                "Invalid Axis-Azimuth. Axis-Azimuth must be between 0 and 359 degrees."
            )

        if not isinstance(max_angle, tuple):
            raise ValueError(
                "Invalid max rotation angles. Please provide max rotation angles as a tuple in range [-90, 90]."
            )

        if not ((-90 <= max_angle[0] <= 0) and (0 <= max_angle[1] <= 90)):
            raise ValueError(
                "Invalid max rotation angles. max rotation angles must be as a tuple in range [-90, 90]."
            )

        if backtrack is not True:
            raise ValueError(
                "Invalid value for Backtrack. The function only accepts Backtrack as True."
            )

        if not (0 <= gcr <= 1):
            raise ValueError("Invalid GCR. GCR must be between 0 and 1.")

        if poa_model not in [
            "isotropic",
            "klucher",
            "haydavies",
            "reindl",
            "king",
            "perez",
        ]:
            raise ValueError(
                "Invalid POA-Model. Please select a valid model from the list ['isotropic',"
                "'klucher', 'haydavies', 'reindl', 'king', 'perez']. Alternatively, use the "
                "default model i.e. 'haydavies'"
            )

    def _get_clearsky_curve_for_tracker(
        self,
        axis_tilt: float,
        axis_azimuth: float,
        max_angle: tuple[float, float],
        backtrack: bool,
        gcr: float,
    ) -> pd.DataFrame:
        """
        Calculate clear sky curve parameters for a single-axis tracker.

        Parameters
        ----------
        axis_tilt (float):
            Tilt angle of the tracker axis in degrees.
        axis_azimuth (float):
            Azimuth angle of the tracker axis in degrees.
        max_angle (Tuple[float, float]):
            Maximum rotation angle of the tracker in degrees.
        backtrack (bool):
            Boolean indicating whether the tracker has a backtracking feature.
        gcr (float):
            Ground coverage ratio of the tracker.

        Returns
        -------
        pandas.DataFrame:
            DataFrame containing tracker data for each time.
        """
        apparent_zenith = self.location_based_clearsky_irradiance.solar_position[
            "apparent_zenith"
        ]
        azimuth = self.location_based_clearsky_irradiance.solar_position["azimuth"]

        tracker_data = pvlib.tracking.singleaxis(
            apparent_zenith,
            azimuth,
            axis_tilt=axis_tilt,
            axis_azimuth=axis_azimuth,
            max_angle=max_angle,
            backtrack=backtrack,
            gcr=gcr,
        )

        return tracker_data

    def get_clearsky_poa_for_tracker(
        self,
        axis_tilt: float,
        axis_azimuth: float,
        max_angle: tuple[float, float],
        backtrack: bool,
        gcr: float,
        poa_model: str = "haydavies",
    ) -> pd.DataFrame:
        """
        Calculate clear sky plane-of-array (POA) irradiance for a single-axis tracker.

        Parameters
        ----------
        axis_tilt (float):
            Tilt angle of the tracker axis in degrees.
        axis_azimuth (float):
            Azimuth angle of the tracker axis in degrees.
        max_angle (Tuple[float, float]):
            Maximum rotation angle of the tracker in degrees.
        backtrack (bool):
            Boolean indicating whether the tracker has a backtracking feature.
        gcr (float):
            Ground coverage ratio of the tracker.
        poa_model (str, optional):
            POA irradiance model to use (default is 'haydavies').

        Returns
        -------
        pandas.DataFrame:
            DataFrame containing clear sky POA irradiance for the tracker for each time.
        """

        self._validate_input_variables(
            axis_tilt, axis_azimuth, max_angle, backtrack, gcr, poa_model
        )

        tracker_data = self._get_clearsky_curve_for_tracker(
            axis_tilt, axis_azimuth, max_angle, backtrack, gcr
        )

        apparent_zenith = self.location_based_clearsky_irradiance.solar_position[
            "apparent_zenith"
        ]
        azimuth = self.location_based_clearsky_irradiance.solar_position["azimuth"]
        airmass = self.location_based_clearsky_irradiance.airmass["airmass_relative"]
        extra_radiation = self.location_based_clearsky_irradiance.extra_radiation

        ghi_clearsky_parameters = (
            self.location_based_clearsky_irradiance.get_clearsky_ghi()
        )

        irradiance = get_total_irradiance(
            surface_tilt=tracker_data["surface_tilt"],
            surface_azimuth=tracker_data["surface_azimuth"],
            solar_zenith=apparent_zenith,
            solar_azimuth=azimuth,
            dni=ghi_clearsky_parameters["dni"],
            dhi=ghi_clearsky_parameters["dhi"],
            airmass=airmass,
            dni_extra=extra_radiation,
            ghi=ghi_clearsky_parameters["ghi"],
            model=poa_model,
        )

        gcsky = (
            cosd(tracker_data["aoi"]) * ghi_clearsky_parameters["dni"]
            + irradiance["poa_diffuse"]
            + irradiance["poa_ground_diffuse"]
        )

        gcsky = pd.DataFrame(gcsky).rename(columns={0: "csky_POA"})

        return gcsky
