import os
import pytest
import pandas as pd
from pandas._testing import assert_frame_equal

from heliolib.clearsky_modelling import LocationBasedClearskyIrradiance

# Sample test data
latitude = 37.7749
longitude = -122.4194
altitude = 50
timezone = "America/Los_Angeles"
surface_tilt = 30
surface_azimuth = 180
times = pd.date_range(start="2023-01-01", end="2023-01-10", freq="h", tz=timezone)


@pytest.fixture
def clearsky_instance():
    return LocationBasedClearskyIrradiance(
        latitude, longitude, altitude, timezone, times
    )


def get_tz_mock_data_for_testing():
    script_directory = os.path.dirname(os.path.abspath(__file__))
    mock_data_file = os.path.join(
        script_directory, "mock_data/mock_data_for_clearsky_irradiance_tz.csv"
    )
    mock_data = pd.read_csv(
        mock_data_file,
        parse_dates=True,
        index_col=0,
    )
    mock_data.index = pd.to_datetime(mock_data.index)
    mock_data.index = mock_data.index.tz_convert("America/Los_Angeles")
    mock_data.index.freq = "H"
    mock_data = mock_data.round(3)
    return mock_data


def get_utc_mock_data_for_testing():
    script_directory = os.path.dirname(os.path.abspath(__file__))
    mock_data_file = os.path.join(
        script_directory, "mock_data/mock_data_for_clearsky_irradiance_utc.csv"
    )
    mock_data = pd.read_csv(
        mock_data_file,
        parse_dates=True,
        index_col=0,
    )
    mock_data.index = pd.to_datetime(mock_data.index)
    mock_data.index = mock_data.index.tz_convert("UTC")
    mock_data.index.freq = "H"
    mock_data = mock_data.round(3)
    return mock_data


def test_location_clearsky_init_with_valid_inputs():
    try:
        clearsky_instance = LocationBasedClearskyIrradiance(
            latitude, longitude, altitude, timezone, times
        )
    except Exception as e:
        pytest.fail(
            f"Failed to initialize LocationBasedClearskyIrradiance with valid inputs: {e}"
        )

    assert isinstance(clearsky_instance, LocationBasedClearskyIrradiance)
    assert clearsky_instance.lat == latitude
    assert clearsky_instance.long == longitude
    assert clearsky_instance.alt == altitude
    assert clearsky_instance.tz == timezone
    assert clearsky_instance.times.equals(times)


def test_location_clearsky_init_with_invalid_inputs():
    with pytest.raises(ValueError):
        LocationBasedClearskyIrradiance(91, longitude, altitude, timezone, times)

    with pytest.raises(ValueError):
        LocationBasedClearskyIrradiance(latitude, 181, altitude, timezone, times)


def test_location_clearsky_init_with_non_aware_index():
    non_aware_times = pd.date_range(start="2023-01-01", end="2023-01-10", freq="H")
    with pytest.raises(ValueError):
        LocationBasedClearskyIrradiance(
            latitude, longitude, altitude, timezone, non_aware_times
        )


def test_get_clearsky_ghi_with_timezone_aware_index(clearsky_instance):
    clearsky_ghi = clearsky_instance.get_clearsky_ghi()
    clearsky_ghi = clearsky_ghi.round(3)
    assert clearsky_ghi.index.tz.__str__() == timezone

    # compare clear sky generated values with mock data
    mock_data = get_tz_mock_data_for_testing()
    mock_data = mock_data.iloc[:, :3]
    assert_frame_equal(clearsky_ghi, mock_data, atol=2)


def test_get_clearsky_ghi_with_utc_aware_index(clearsky_instance):
    utc_times = pd.date_range(
        start="2023-01-01 00:00:00", end="2023-01-10 00:00:00", freq="H", tz="UTC"
    )
    clearsky_instance = LocationBasedClearskyIrradiance(
        latitude, longitude, altitude, timezone, utc_times
    )
    clearsky_ghi = clearsky_instance.get_clearsky_ghi()
    clearsky_ghi = clearsky_ghi.round(3)
    assert clearsky_ghi.index.tz.__str__() == "UTC"

    # compare clear sky generated values with mock data
    mock_data = get_utc_mock_data_for_testing()
    mock_data = mock_data.iloc[:, :3]
    assert_frame_equal(clearsky_ghi, mock_data)


def test_get_clearsky_poa_with_timezone_aware_index(clearsky_instance):
    clearsky_ghi = clearsky_instance.get_clearsky_poa(surface_tilt, surface_azimuth)
    clearsky_ghi = clearsky_ghi.round(3)
    assert clearsky_ghi.index.tz.__str__() == timezone

    # compare clear sky generated values with mock data
    mock_data = get_tz_mock_data_for_testing()
    mock_data = mock_data.iloc[:, 3:]
    assert_frame_equal(clearsky_ghi, mock_data, atol=1)


def test_get_clearsky_poa_with_utc_aware_index(clearsky_instance):
    utc_times = pd.date_range(
        start="2023-01-01 00:00:00", end="2023-01-10 00:00:00", freq="H", tz="UTC"
    )
    clearsky_instance = LocationBasedClearskyIrradiance(
        latitude, longitude, altitude, timezone, utc_times
    )
    clearsky_ghi = clearsky_instance.get_clearsky_poa(surface_tilt, surface_azimuth)
    clearsky_ghi = clearsky_ghi.round(3)
    assert clearsky_ghi.index.tz.__str__() == "UTC"

    # compare clear sky generated values with mock data
    mock_data = get_utc_mock_data_for_testing()
    mock_data = mock_data.iloc[:, 3:]
    assert_frame_equal(clearsky_ghi, mock_data)
