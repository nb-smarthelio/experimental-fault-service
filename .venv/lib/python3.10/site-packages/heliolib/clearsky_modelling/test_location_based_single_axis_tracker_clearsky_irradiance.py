import os
import pytest
import pandas as pd
from pandas._testing import assert_frame_equal

from heliolib.clearsky_modelling import LocationBasedClearskyIrradiance
from heliolib.clearsky_modelling import LocationBasedSingleAxisTrackerClearskyIrradiance

# Sample test data
latitude = 37.7749
longitude = -122.4194
altitude = 50
timezone = "America/Los_Angeles"
surface_tilt = 30
surface_azimuth = 180
times = pd.date_range(start="2023-01-01", end="2023-01-10", freq="H", tz=timezone)

axis_tilt = 30
axis_azimuth = 180
max_angle = (-45, 45)
backtrack = True
gcr = 0
poa_model = "haydavies"


@pytest.fixture
def location_based_clearsky():
    # Create a LocationBasedClearskyIrradiance instance for testing.
    clearsky = LocationBasedClearskyIrradiance(
        latitude, longitude, altitude, timezone, times
    )
    return clearsky


@pytest.fixture
def tracker_clearsky(location_based_clearsky):
    return LocationBasedSingleAxisTrackerClearskyIrradiance(location_based_clearsky)


def get_tz_mock_data_for_testing():
    script_directory = os.path.dirname(os.path.abspath(__file__))
    mock_data_file = os.path.join(
        script_directory,
        "mock_data/mock_data_for_clearsky_single_axis_irradiance_tz.csv",
    )
    mock_data = pd.read_csv(
        mock_data_file,
        parse_dates=True,
        index_col=0,
    )
    mock_data.index = pd.to_datetime(mock_data.index)
    mock_data.index = mock_data.index.tz_convert(timezone)
    mock_data.index.freq = "H"
    mock_data = mock_data.round(3)
    return mock_data


def test_location_clearsky_single_axis_tracker_init_with_invalid_inputs(
    tracker_clearsky,
):
    # Invalid latitude for LocationBasedClearskyIrradiance (91 degrees)
    with pytest.raises(
        ValueError,
        match="Invalid latitude. Latitude must be between -90 and 90 degrees.",
    ):
        LocationBasedClearskyIrradiance(91, longitude, altitude, timezone, times)

    # Invalid longitude for LocationBasedClearskyIrradiance (181 degrees)
    with pytest.raises(
        ValueError,
        match="Invalid longitude. Longitude must be between -180 and 180 degrees.",
    ):
        LocationBasedClearskyIrradiance(latitude, 181, altitude, timezone, times)

    # Invalid POA-Model in _validate_input_variables
    with pytest.raises(
        ValueError, match="Invalid POA-Model. Please select a valid model"
    ):
        tracker_clearsky._validate_input_variables(
            axis_tilt, axis_azimuth, max_angle, backtrack, gcr, "invalid"
        )

    # Invalid axis tilt (91 degrees, should be between 0 and 90)
    with pytest.raises(
        ValueError,
        match="Invalid Axis-Tilt. Axis-Tilt must be between 0 and 90 degrees.",
    ):
        tracker_clearsky._validate_input_variables(
            91, axis_azimuth, max_angle, backtrack, gcr, poa_model
        )

    # Invalid axis azimuth (181 degrees, should be between 0 and 359)
    with pytest.raises(
        ValueError,
        match="Invalid Axis-Azimuth. Axis-Azimuth must be between 0 and 359 degrees.",
    ):
        tracker_clearsky._validate_input_variables(
            axis_tilt, 360, max_angle, backtrack, gcr, poa_model
        )

    # Invalid max rotation angles (not a tuple or out of range)
    with pytest.raises(ValueError, match="Invalid max rotation angles"):
        tracker_clearsky._validate_input_variables(
            axis_tilt, axis_azimuth, (0, 100), backtrack, gcr, poa_model
        )

    # Invalid backtrack (must be True)
    with pytest.raises(ValueError, match="Invalid value for Backtrack"):
        tracker_clearsky._validate_input_variables(
            axis_tilt, axis_azimuth, max_angle, False, gcr, poa_model
        )

    # Invalid GCR (greater than 1)
    with pytest.raises(ValueError, match="Invalid GCR. GCR must be between 0 and 1."):
        tracker_clearsky._validate_input_variables(
            axis_tilt, axis_azimuth, max_angle, backtrack, 1.1, poa_model
        )


def test_get_clearsky_poa_for_tracker(tracker_clearsky):
    # Test that the method returns a DataFrame
    tracker_poa = tracker_clearsky.get_clearsky_poa_for_tracker(
        axis_tilt, axis_azimuth, max_angle, backtrack, gcr
    )
    tracker_poa = tracker_poa.round(3)
    assert isinstance(tracker_poa, pd.DataFrame)

    # compare clear sky generated values with mock data
    mock_data = get_tz_mock_data_for_testing()
    assert_frame_equal(tracker_poa, mock_data, atol=1.7)
