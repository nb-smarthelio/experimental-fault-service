import logging

import pandas as pd
from pvlib.location import Location
from pvlib.clearsky import ineichen, lookup_linke_turbidity
from pvlib.irradiance import get_extra_radiation, get_total_irradiance


logger = logging.getLogger(__name__)


class LocationBasedClearskyIrradiance:
    """
    A class for calculating clear sky irradiance parameters at a given location and time.

    Parameters
    ----------
    latitude (float):
        Latitude of the location in degrees (-90 to 90).
    longitude (float):
        Longitude of the location in degrees (-180 to 180).
    altitude (float):
        Altitude of the location in meters above sea level.
    timezone (str):
        Timezone of the location (e.g., 'Europe/London').
    times (pandas.DatetimeIndex):
        Timezone Aware Datetime index specifying the times for which to calculate the
        parameters.

    Methods
    -------
    _get_site_location():
        Retrieve location details using latitude, longitude, altitude, and timezone.

    _get_solar_position():
        Calculate solar position parameters based on times.

    _get_airmass():
        Calculate airmass values based on solar position and times.

    _get_linked_turbidity():
        Lookup Linked turbidity values based on location and times.

    _get_extra_radiation():
        Get extra radiation values based on times.

    get_clearsky_ghi():
        Calculate clear sky global horizontal irradiance (GHI) parameters.

        Returns:
        - pandas.DataFrame: DataFrame containing clear sky GHI parameters for each time.

    get_clearsky_poa(surface_tilt, surface_azimuth):
        Calculate clear sky plane-of-array (POA) irradiance parameters.

        Parameters
        ----------
        surface_tilt (float): Tilt angle of the surface in degrees.
        surface_azimuth (float): Azimuth angle of the surface in degrees.

        Returns
        -------
        pandas.DataFrame: DataFrame containing clear sky POA parameters for each time.
    """

    def __init__(
        self,
        latitude: float,
        longitude: float,
        altitude: float,
        timezone: str,
        times: pd.DatetimeIndex,
    ) -> None:
        """
        Initialize Clearsky object with location parameters and times.

        Parameters
        ----------
        latitude (float):
            Latitude of the location in degrees (-90 to 90).
        longitude (float):
            Longitude of the location in degrees (-180 to 180).
        altitude (float):
            Altitude of the location in meters above sea level.
        timezone (str):
            Timezone of the location.
        times (pandas.DatetimeIndex):
            Timezone-aware Datetime index specifying the times for which to calculate the parameters.

        Raises
        ------
        ValueError:
            If latitude is not between -90 and 90 degrees, longitude is not between -180 and 180 degrees,
            or times is not timezone-aware.
        """

        # Validate latitude and longitude
        if not (-90 <= latitude <= 90):
            raise ValueError(
                "Invalid latitude. Latitude must be between -90 and 90 degrees."
            )

        if not (-180 <= longitude <= 180):
            raise ValueError(
                "Invalid longitude. Longitude must be between -180 and 180 degrees."
            )
        if times.tzinfo is None:
            raise ValueError('Please provide "times" as Timezone-aware index.')

        self.lat = latitude
        self.long = longitude
        self.alt = altitude
        self.tz = timezone
        self.times = times
        self.site_location = self._get_site_location()
        self.solar_position = self._get_solar_position()
        self.airmass = self._get_airmass()
        self.linked_turbidity = self._get_linked_turbidity()
        self.extra_radiation = self._get_extra_radiation()

    def _get_site_location(self) -> Location:
        """
        Retrieve location details using latitude, longitude, altitude, and timezone.

        Returns
        -------
        Location:
            Location object with the latitude, longitude, altitude, and timezone specified.
        """
        site_location = Location(
            latitude=self.lat, longitude=self.long, altitude=self.alt, tz=self.tz
        )
        logger.info("Clearsky Modelling: Extracted Site Location.")

        return site_location

    def _get_solar_position(self) -> pd.DataFrame:
        """
        Calculate solar position parameters based on the specified times.

        Returns
        -------
        pandas.DataFrame:
            DataFrame containing solar position parameters such as apparent zenith and azimuth for each time.
        """
        solar_position = self.site_location.get_solarposition(times=self.times)
        logger.info("Clearsky Modelling: Extracted Solar Position.")

        return solar_position

    def _get_airmass(self) -> pd.DataFrame:
        """
        Extract airmass values based on solar position and times.

        Returns
        -------
        pandas.DataFrame:
            DataFrame containing airmass values (absolute and relative) for each time.
        """
        airmass = self.site_location.get_airmass(
            times=self.times, solar_position=self.solar_position
        )
        logger.info("Clearsky Modelling: Extracted Airmass.")
        return airmass

    def _get_linked_turbidity(self) -> pd.Series:
        """
        Extract linked turbidity values based on location (latitude and longitude) and times.

        Returns
        -------
        pandas.Series:
            Series containing linked turbidity values for each time.
        """
        linked_turbidity = lookup_linke_turbidity(
            time=self.times, latitude=self.lat, longitude=self.long
        )
        logger.info("Clearsky Modelling: Extracted Linked Turbidity.")
        return linked_turbidity

    def _get_extra_radiation(self) -> pd.Series:
        """
        Extract extra radiation values based on times.

        Returns
        -------
        pandas.Series:
            Series containing extra radiation values for each time.
        """
        extra_radiation = get_extra_radiation(datetime_or_doy=self.times)
        logger.info("Clearsky Modelling: Extracted Extra Radiation.")
        return extra_radiation

    def get_clearsky_ghi(self) -> pd.DataFrame:
        """
        Calculate clear sky global horizontal irradiance (GHI) parameters.

        Returns
        -------
        pandas.DataFrame:
            DataFrame containing clear sky GHI, DNI (Direct Normal Irradiance), and DHI (Diffuse Horizontal Irradiance)
            values for each time.
        """
        # Calculate clear sky GHI based on solar position, airmass, turbidity, etc.
        ghi_clearsky_parameters = ineichen(
            apparent_zenith=self.solar_position["apparent_zenith"],
            airmass_absolute=self.airmass["airmass_absolute"],
            linke_turbidity=self.linked_turbidity,
            altitude=self.alt,
            dni_extra=self.extra_radiation,
        )
        return ghi_clearsky_parameters

    def get_clearsky_poa(
        self, surface_tilt: float, surface_azimuth: float
    ) -> pd.DataFrame:
        """
        Calculate clear sky plane-of-array (POA) irradiance parameters.

        Parameters
        ----------
        surface_tilt (float):
            Tilt angle of the surface in degrees.
        surface_azimuth (float):
            Azimuth angle of the surface in degrees.

        Returns
        -------
        pandas.DataFrame:
            DataFrame containing clear sky POA parameters such as POA irradiance for each time.
        """

        ghi_clearsky_parameters = self.get_clearsky_ghi()

        # Calculate clear sky POA based on surface tilt, azimuth, GHI, DNI, DHI, etc.
        poa_clearsky_parameters = get_total_irradiance(
            surface_tilt=surface_tilt,
            surface_azimuth=surface_azimuth,
            dni=ghi_clearsky_parameters["dni"],
            ghi=ghi_clearsky_parameters["ghi"],
            dhi=ghi_clearsky_parameters["dhi"],
            solar_zenith=self.solar_position["apparent_zenith"],
            solar_azimuth=self.solar_position["azimuth"],
        )

        return poa_clearsky_parameters
