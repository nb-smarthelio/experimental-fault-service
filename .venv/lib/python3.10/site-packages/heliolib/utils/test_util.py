import datetime

import pandas as pd
import numpy as np
import pytest

from .util import get_next_n_timestamp_indexes

DATA_FREQUENCY = 5


def test_get_next_n_timestamps_with_valid_inputs():
    expected_result = pd.date_range("2024-01-01 00:05:00", periods=5, freq="5T")
    result = get_next_n_timestamp_indexes(
        pd.to_datetime("2024-01-01 00:00:00"), DATA_FREQUENCY, periods=5
    )
    assert np.array_equal(result, expected_result)


def test_get_next_n_timestamps_with_datetime_timestamp():
    with pytest.raises(ValueError, match="timestamp must be a pandas Timestamp object"):
        get_next_n_timestamp_indexes(
            datetime.datetime(2024, 1, 1), DATA_FREQUENCY, periods=5
        )


def test_get_next_n_timestamps_with_invalid_timestamp():
    with pytest.raises(ValueError, match="timestamp must be a pandas Timestamp object"):
        get_next_n_timestamp_indexes("2024-05-01", 1, 5)


def test_get_next_n_timestamps_with_invalid_data_freq():
    with pytest.raises(ValueError, match="data_freq must be an integer"):
        get_next_n_timestamp_indexes(pd.to_datetime("2024-05-01"), "1", 5)


def test_get_next_n_timestamps_with_invalid_periods():
    with pytest.raises(ValueError, match="periods must be an integer"):
        get_next_n_timestamp_indexes(pd.to_datetime("2024-05-01"), 1, "5")
