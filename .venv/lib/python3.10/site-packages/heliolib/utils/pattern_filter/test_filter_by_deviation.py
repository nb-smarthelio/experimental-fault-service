import pytest
import pandas as pd

from heliolib.utils.pattern_filter import (
    filter_by_deviation,
    normalize_and_calculate_deviation_between_two_columns,
)


def empty_dataframe_to_test():
    """
    Helper function to create an empty dataframe for testing.

    Returns:
    -------
    df : pd.DataFrame
        The empty dataframe.
    """
    df = pd.DataFrame()
    return df


def mock_valid_dataframe_to_test():
    """
    Helper function to create a mock valid dataframe for testing.

    Returns:
    -------
    df : pd.DataFrame
        The mock valid dataframe.
    """
    df = pd.DataFrame({"col1": [i for i in range(10)], "col2": [i for i in range(10)]})
    return df


def test_filter_by_deviation_with_invalid_empty_dataframe():
    """
    Test if filter_by_deviation raises an IndexError when called with an empty dataframe.

    Returns:
    -------
    None
    """
    df = empty_dataframe_to_test()
    with pytest.raises(IndexError) as error:
        filter_by_deviation(
            df, deviation_degree=0.1, filter_within_sensitivity_tolerance=True
        )

    assert str(error.value) == "index 0 is out of bounds for axis 0 with size 0"


def test_filter_by_deviation_with_valid_dataframe():
    """
    Test if filter_by_deviation returns a valid dataframe when called with a valid dataframe.

    Returns:
    -------
    None
    """
    df = normalize_and_calculate_deviation_between_two_columns(
        mock_valid_dataframe_to_test()
    )
    filtered_df = filter_by_deviation(
        df, deviation_degree=0.1, filter_within_sensitivity_tolerance=True
    )

    assert isinstance(filtered_df, pd.DataFrame)
