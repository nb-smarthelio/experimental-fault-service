import logging
from .invalid_column_values_exception import InvalidColumnValueException

import pandas as pd

logger = logging.getLogger(__name__)


def normalize_and_calculate_deviation_between_two_columns(
    df: pd.DataFrame,
) -> pd.DataFrame:
    """
    We will get the dataframe with two columns, and it will add the normalized and deviation columns to it.
    Normalizing factor for each column is the max value in that column respectively.

    Parameters:
    ----------
    df (pd.DataFrame):
        Input DataFrame containing columns for comparison.

    Returns:
    -------
    - pd.DataFrame: Filtered DataFrame based on specified deviations and tolerance.

    Notes:
    - The function compares two columns in the DataFrame for deviations.
    - Deviation is calculated as the absolute difference between normalized values of two columns.
    - Columns 'master' and 'slave' represent truth values and the column to be compared, respectively.
    - NaN and non-positive values in the input columns are logged as errors.

    Example:
     filtered_data = normalize_and_calculate_deviation_between_two_columns(my_dataframe)

     INPUT dataframe:
                           +-----+-----+-----+
                           |     | col1| col2|
                           |-----|-----|-----|
                           |   0 |   1 |   1 |
                           |   1 |   1 |   1 |
                           |   2 |   1 |   1 |
                           |   3 |   1 |   1 |
                           +-----+-----+-----+

     OUTPUT dataframe:
                    +---+-----+-----+--------+---------+--------------+
                   |   | col1| col2|col1_norm|col2_norm|col1_col2_dev|
                   |---|-----|-----|---------|---------|-------------|
                   | 0 | 1.0 | 1.0 |   1.0   |   1.0   |     0.0     |
                   | 1 | 1.0 | 1.0 |   1.0   |   1.0   |     0.0     |
                   | 2 | 1.0 | 1.0 |   1.0   |   1.0   |     0.0     |
                   | 3 | 1.0 | 1.0 |   1.0   |   1.0   |     0.0     |
                   +---+-----+-----+---------+---------+--------------+
    """

    """
    It Validates the columns present in the dataframe one by one if it gets <=0 or NaN so it will log 
    ERROR for the particular columns.
    """
    master = df.columns[0]
    slave = df.columns[1]
    norm_column_string = "_norm"
    dev_column_string = "_dev"
    if (df[master] <= 0).all() or df[master].isna().all():
        logger.error(
            f"`{master}` Column does not pass the Validation. It contains the value NaN, zero or less than it."
        )
        raise InvalidColumnValueException(master)
    elif (df[slave] <= 0).all() or df[slave].isna().all():
        logger.error(
            f"`{slave}` Column does not pass the Validation. It contains the value NaN, zero or less than it."
        )
        raise InvalidColumnValueException(slave)
    else:
        logger.debug("Validation pass for Both the Columns.")

    df = df[df > 0]
    df = df.dropna()
    """
    After dropping NaN values if DataFrame is empty then we will get the empty dataFrame.
    """
    if df.empty:
        return df

    # TypeCasting both columns of the dataframe.
    df = df.astype(float)

    """ 
    Adding normalized columns to the dataframe.
    And:
        master: represents TRUTH values for the comparison.
        slave: represents the column which has to be compared with the TRUTH values.
    """
    df[master + norm_column_string] = df[master] / df[master].max()
    df[slave + norm_column_string] = (df[slave] / df[slave].max()) * df.loc[
        df[slave].idxmax(), master + norm_column_string
    ]

    # Adding a column for the deviation in between of columns.
    df[master + "_" + slave + dev_column_string] = abs(
        df[master + norm_column_string] - df[slave + norm_column_string]
    )

    # Dropping NaN Values.
    df = df.dropna()

    # TypeCasting all columns to float
    df = df.astype(float)

    return df
