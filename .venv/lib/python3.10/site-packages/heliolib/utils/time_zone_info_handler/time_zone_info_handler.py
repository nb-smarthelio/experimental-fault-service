import logging
from datetime import timezone

import pandas as pd
from dateutil import tz

logger = logging.getLogger(__name__)


class TimeZoneInfoHandler:
    """
    A class to handle timezone conversions for a pandas DataFrame with a DatetimeIndex.

    Methods:
    --------

    validate_if_index_is_time_zone_aware(expect_aware, dataframe):
        Validate if the datetime index in the dataframe is timezone aware or not, based on the expectation.

    validate_timezone_string(timezone_str):
        Validate if the provided string is a recognized timezone.

    make_naive_datetime_specific_timezone_aware(timezone, dataframe):
        Convert the DataFrame's index to timezone-aware datetime objects with a specified timezone.

    convert_timezone_aware_datetime_to_different_timezone(new_timezone, dataframe):
        Convert the DataFrame's index to a different timezone.

    detect_dst_transitions_in_aware_datetime(dataframe):
        Detects any Daylight Saving Time (DST) transitions in the DataFrame's datetime index using Arrow.

    handle_dst_shifts_in_aware_datetime(dataframe):
        Automatically handles Daylight Saving Time (DST) shifts in the DataFrame's datetime index.

    Raises:
    -------
    TypeError:
        If the input is not a pandas DataFrame.
        If the DataFrame's index is not a DatetimeIndex.
    ValueError:
        If the DataFrame's index is not timezone aware but the user expects it to be.
        If the DataFrame's index is already timezone aware but the user expects it not to be.

    Examples:
    ---------
    df = pd.DataFrame(...), where the index is a DatetimeIndex.
    tz_handler = TimeZoneHandler(df)
    tz_handler.make_naive_datetime_specific_timezone_aware('US/Eastern')
    new_timezone = 'Europe/London'
    tz_handler.convert_timezone_aware_datetime_to_different_timezone(new_timezone)

    Notes:
    ------
    The methods in this class modify the DataFrame's index in-place.
    """

    @staticmethod
    def _validate_dataframe(dataframe: pd.DataFrame) -> None:
        """
        Validate if the input is a pandas DataFrame with a DatetimeIndex.

        Parameters:
        -----------
        dataframe : pd.DataFrame
            A pandas DataFrame which needs to be validated.

        Raises:
        ------
        TypeError:
            If the input is not a pandas DataFrame.
            If the DataFrame's index is not a DatetimeIndex.
        """
        if not isinstance(dataframe, pd.DataFrame):
            raise TypeError("The input must be a pandas DataFrame.")
        if not isinstance(dataframe.index, pd.DatetimeIndex):
            raise TypeError("DataFrame index must be a DatetimeIndex.")
        logger.debug("Dataframe passed the validation.")

    @staticmethod
    def validate_if_index_is_time_zone_aware(
        expect_aware: bool, dataframe: pd.DataFrame
    ) -> None:
        """
        Validate if the datetime index is timezone aware or not, based on the expectation.

        Parameters:
        -----------
        expect_aware : bool
            Whether the index is timezone aware or not.
        dataframe : pd.DataFrame
            A pandas DataFrame whose index's timezone needs to be validated.

        Raises:
        -------
        ValueError:
            If the DataFrame's index is not timezone aware but the user expects it to be.
            If the DataFrame's index is already timezone aware but the user expects it not to be.
        """
        index_timezone = dataframe.index.tzinfo
        is_aware = index_timezone is not None
        if is_aware:
            logger.info(f"Provided datetime index is {index_timezone} aware.")
        else:
            logger.info("Provided datetime index is not timezone aware.")
        if not is_aware and expect_aware:
            raise ValueError(
                "Datetime index is not timezone aware. Please ensure the index is timezone aware before "
                "proceeding."
            )
        if is_aware and not expect_aware:
            raise ValueError("Datetime index is already timezone aware.")

    @staticmethod
    def validate_timezone_string(timezone_str: str) -> None:
        """
        Validate if the provided string is a recognized timezone.

        Parameters:
        -----------
        timezone_str : str
            A string representing a timezone.

        Raises:
        -------
        ValueError:
            If the provided string is a recognized timezone.
        Exception:
            An error occurred while validating the timezone string.
        """
        if timezone_str is None:
            raise ValueError("Timezone string cannot be None.")
        try:
            if tz.gettz(timezone_str) is None:
                raise Exception(
                    f"An error occurred while validating the timezone string: {timezone_str}"
                )
            else:
                logger.info(f"Timezone string {timezone_str} is valid.")
        except Exception as e:
            # Catching general exceptions from dateutil as they don't have a specific exception for invalid timezones.
            logger.error(f"Error validating timezone string: {e}")
            raise Exception(
                f"An error occurred while validating the timezone string: {timezone_str}"
            )

    def make_naive_datetime_specific_timezone_aware(
        self, timezone_str: str, dataframe: pd.DataFrame
    ) -> None:
        """
        Convert the DataFrame's index to timezone-aware datetime objects with a specified timezone.

        Parameters:
        -----------
        timezone_str : str
            A string representing a timezone.
        dataframe : pd.DataFrame
            A pandas DataFrame whose index's timezone needs to be converted.

        Raises:
        -------
        Exception:
            If an error occurred while making the datetime index timezone-aware.
        """
        try:
            self.validate_if_index_is_time_zone_aware(
                expect_aware=False, dataframe=dataframe
            )
            self.validate_timezone_string(timezone_str)
            dataframe.index = dataframe.index.tz_localize(timezone_str)
            logger.info(f"Datetime index is now {timezone_str} aware.")
        except Exception as e:
            logger.error(f"Error in making datetime index {timezone_str} aware: {e}")
            raise Exception(
                f"An error occurred while making the datetime index {timezone_str} aware: {e}"
            )

    def convert_timezone_aware_datetime_to_different_timezone(
        self, new_timezone_str: str, dataframe: pd.DataFrame
    ) -> None:
        """
        Convert the DataFrame's index to a different timezone.

        Parameters:
        -----------
        new_timezone_str : str
            A string representing a timezone.
        dataframe : pd.DataFrame
            A pandas DataFrame whose index's timezone needs to be converted.

        Raises:
        -------
        Exception:
            Error in converting datetime index to new timezone.
        """
        try:
            self.validate_if_index_is_time_zone_aware(
                expect_aware=True, dataframe=dataframe
            )
            self.validate_timezone_string(new_timezone_str)
            dataframe.index = dataframe.index.tz_convert(new_timezone_str)
            logger.info(f"Datetime index is converted to {new_timezone_str}")
        except Exception as e:
            logger.error(
                f"Error in converting datetime index to {new_timezone_str}: {e}"
            )
            raise

    @staticmethod
    def detect_dst_transitions_in_aware_datetime(
        dataframe: pd.DataFrame,
    ) -> list[tuple]:
        """
        Detects any Daylight Saving Time (DST) transitions in the DataFrame's datetime index.

        Parameters:
        -----------
        dataframe : pd.DataFrame
            A pandas DataFrame where in we detect DST.

        Returns
        -------
        list of tuples
            A list of tuples where each tuple represents a transition point.
            Each tuple contains the timestamp before the transition and the timestamp after the transition.

        Raises
        ------
        ValueError
            If the datetime index is not timezone aware.
            If the datetime index is timezone aware but the timezone is UTC because UTC does not have DST transitions.

        Notes
        -----
        This method assumes that the datetime index is timezone-aware and the timezone has DST transitions.
        """
        if dataframe.index.tz is None:
            raise ValueError(
                "Datetime index is not timezone aware. Please make the index timezone aware before detecting DST "
                "transitions."
            )
        if dataframe.index.tz is timezone.utc:
            raise ValueError(
                "Datetime index is timezone aware but the timezone is UTC. Please convert the index to a timezone "
                "with DST transitions before detecting DST transitions."
            )

        transition_points = []
        try:
            for i in range(1, len(dataframe.index)):
                prev_dt = dataframe.index[i - 1]
                curr_dt = dataframe.index[i]

                if prev_dt.dst() != curr_dt.dst():
                    transition_points.append((prev_dt, curr_dt))
        except Exception as e:
            logger.error(f"Error in detecting DST transitions: {e}")
            raise
        if len(transition_points):
            logger.info(f"{len(transition_points)} DST transitions detected.")
        else:
            logger.info("No DST transitions detected.")
        return transition_points

    def handle_dst_shifts_in_aware_datetime(self, dataframe: pd.DataFrame) -> None:
        """
        Automatically handles Daylight Saving Time (DST) shifts in the DataFrame's datetime index.
        If DST shifts are detected, it converts the datetime index to UTC to standardize the timestamps.

        Parameters:
        -----------
        dataframe : pd.DataFrame
            A pandas DataFrame where in we handle DST shifts.

        Notes:
        ------
        1. After converting to UTC, there will be a duplicate timestamp for the hour that is repeated.
        2. This method modifies the DataFrame's index in-place.
        """
        # Detect DST transitions
        dst_transitions = self.detect_dst_transitions_in_aware_datetime(
            dataframe=dataframe
        )
        # Convert to UTC if DST transitions are detected
        # NOTE - This might create duplicate timestamps for the hour that is repeated in fall back period.
        if dst_transitions:
            logger.info(f"To handle DST shift, index will be converted to UTC.")
            self.convert_timezone_aware_datetime_to_different_timezone(
                new_timezone_str="UTC", dataframe=dataframe
            )
        else:
            logger.info("No DST shift detected.")
