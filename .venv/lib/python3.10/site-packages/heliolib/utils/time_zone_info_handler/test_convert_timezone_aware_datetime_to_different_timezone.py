import pandas as pd
import pytest
from heliolib.utils.time_zone_info_handler import TimeZoneInfoHandler


def prepare_eastern_time_zone_aware_dataframe():
    """Returns a DataFrame with a timezone-aware DatetimeIndex in US/Eastern."""
    return pd.DataFrame(
        {"data": range(3)},
        index=pd.date_range("2023-01-01", periods=3, tz="US/Eastern"),
    )


def prepare_time_zone_naive_dataframe():
    """Returns a DataFrame with a timezone-naive DatetimeIndex."""
    return pd.DataFrame(
        {"data": range(3)}, index=pd.date_range("2023-01-01", periods=3)
    )


def test_convert_timezone_aware_datetime_to_different_timezone_validate_with_time_zone_aware_index():
    eastern_time_zone_aware_dataframe = prepare_eastern_time_zone_aware_dataframe()
    timezone_handler = TimeZoneInfoHandler()
    timezone_string_to_convert_to = "Europe/Berlin"
    timezone_handler.convert_timezone_aware_datetime_to_different_timezone(
        new_timezone_str=timezone_string_to_convert_to,
        dataframe=eastern_time_zone_aware_dataframe,
    )
    assert (
        str(eastern_time_zone_aware_dataframe.index.tzinfo)
        == timezone_string_to_convert_to
    )


def test_convert_timezone_aware_datetime_to_different_timezone_fails_with_time_zone_naive_index():
    time_zone_naive_dataframe = prepare_time_zone_naive_dataframe()
    timezone_handler = TimeZoneInfoHandler()
    timezone_string_to_convert_to = "Europe/Berlin"
    with pytest.raises(Exception) as exc_info:
        timezone_handler.convert_timezone_aware_datetime_to_different_timezone(
            new_timezone_str=timezone_string_to_convert_to,
            dataframe=time_zone_naive_dataframe,
        )
    assert str(exc_info.value) == (
        "Datetime index is not timezone aware. Please ensure the index is timezone aware "
        "before proceeding."
    )
