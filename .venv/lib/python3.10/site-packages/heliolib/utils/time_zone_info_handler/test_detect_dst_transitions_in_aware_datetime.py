import pandas as pd
import pytest

from heliolib.utils.time_zone_info_handler import TimeZoneInfoHandler


def prepare_time_zone_aware_dst_transition_dataframe():
    """Returns a DataFrame with a timezone-aware DatetimeIndex that includes DST transitions."""
    # Example for US/Eastern which has DST transitions
    dates = pd.date_range("2021-03-13", "2021-03-15", freq="H", tz="US/Eastern")
    return pd.DataFrame({"data": range(len(dates))}, index=dates)


def prepare_time_zone_aware_no_dst_transition_dataframe():
    """Returns a DataFrame with a timezone-aware DatetimeIndex without DST transitions."""
    # Example for a timezone without DST transitions, like 'Asia/Tokyo'
    dates = pd.date_range("2021-03-13", "2021-03-15", freq="H", tz="Asia/Tokyo")
    return pd.DataFrame({"data": range(len(dates))}, index=dates)


def prepare_utc_aware_indexed_dataframe():
    """Returns a DataFrame with a UTC-indexed DatetimeIndex."""
    dates = pd.date_range("2021-03-13", "2021-03-15", freq="H", tz="UTC")
    return pd.DataFrame({"data": range(len(dates))}, index=dates)


def prepare_time_zone_naive_index_dataframe():
    """Returns a DataFrame with a timezone-naive DatetimeIndex."""
    dates = pd.date_range("2021-03-13", "2021-03-15", freq="H")
    return pd.DataFrame({"data": range(len(dates))}, index=dates)


def test_dst_transition_detection_in_aware_datetime_validated_with_timezone_aware_index_with_transitions():
    time_zone_aware_dst_transition_dataframe = (
        prepare_time_zone_aware_dst_transition_dataframe()
    )
    timezone_handler = TimeZoneInfoHandler()
    transitions = timezone_handler.detect_dst_transitions_in_aware_datetime(
        dataframe=time_zone_aware_dst_transition_dataframe
    )
    expected_transitions = [
        (
            pd.Timestamp("2021-03-14 01:00:00-0500", tz="US/Eastern"),
            pd.Timestamp("2021-03-14 03:00:00-0400", tz="US/Eastern"),
        )
    ]
    assert transitions == expected_transitions


def test_dst_transition_detection_in_aware_datetime_validates_with_timezone_aware_index_without_transitions():
    time_zone_aware_no_dst_transition_dataframe = (
        prepare_time_zone_aware_no_dst_transition_dataframe()
    )
    timezone_handler = TimeZoneInfoHandler()
    transitions = timezone_handler.detect_dst_transitions_in_aware_datetime(
        dataframe=time_zone_aware_no_dst_transition_dataframe
    )
    assert len(transitions) == 0


def test_dst_transition_detection_in_aware_datetime_fails_with_utc_aware_index():
    utc_aware_indexed_dataframe = prepare_utc_aware_indexed_dataframe()
    timezone_handler = TimeZoneInfoHandler()
    with pytest.raises(ValueError) as exc_info:
        timezone_handler.detect_dst_transitions_in_aware_datetime(
            dataframe=utc_aware_indexed_dataframe
        )
    assert str(exc_info.value) == (
        "Datetime index is timezone aware but the timezone is UTC. Please convert the index to a "
        "timezone with DST transitions before detecting DST transitions."
    )


def test_dst_transition_detection_in_aware_datetime_fails_with_time_zone_naive_index():
    time_zone_naive_index_dataframe = prepare_time_zone_naive_index_dataframe()
    timezone_handler = TimeZoneInfoHandler()
    with pytest.raises(ValueError) as exc_info:
        timezone_handler.detect_dst_transitions_in_aware_datetime(
            dataframe=time_zone_naive_index_dataframe
        )
    assert str(exc_info.value) == (
        "Datetime index is not timezone aware. Please make the index timezone aware before "
        "detecting DST transitions."
    )
