import logging

import pandas as pd

logger = logging.getLogger(__name__)


def calculate_frequency_in_integer_minutes(datetime_index: pd.DatetimeIndex) -> tuple:
    """
    Calculate the most common frequency in integer minutes from a pandas DatetimeIndex.

    This function computes the frequency of the passed `datetime_index` in integer minutes by
    determining the time difference between consecutive values, finding the most common difference,
    and converting it to a frequency in minutes.

    Args:
        datetime_index (pd.DatetimeIndex): A pandas DatetimeIndex object representing a sequence of datetime values.

    Returns:
        tuple: A tuple containing:
            - frequency_in_integer_minutes_str (str): The calculated frequency as a string,
              formatted in integer minutes (e.g., '5T' for a 5-minute frequency).
            - frequency_in_integer_minutes (int): The calculated frequency in minutes as an integer.

    Raises:
        TypeError: If `datetime_index` is not of type `pd.DatetimeIndex`.
        ValueError: If `datetime_index` has fewer than 2 entries or is not monotonically increasing.

    Example:
        >>> idx = pd.date_range('2024-01-01', periods=4, freq='5T')
        >>> calculate_frequency_in_integer_minutes(idx)
        ('5T', 5)
    """
    if not isinstance(datetime_index, pd.DatetimeIndex):
        raise TypeError("datetime_index must be of type pd.DatetimeIndex")
    if len(datetime_index) < 2:
        raise ValueError("datetime_index must have at least 2 entries")
    if not datetime_index.is_monotonic_increasing:
        raise ValueError("datetime_index must be monotonically increasing")

    logger.debug(f"Calculating frequency of the passed index.")
    # Step 2: If inferred_freq is None, compute differences
    differences = datetime_index[1:].values - datetime_index[:-1].values
    # Step 3: Find the most common difference
    freq = pd.Series(differences).value_counts().idxmax()
    frequency_in_integer_minutes = int(pd.to_timedelta(freq).total_seconds() // 60)
    frequency_in_integer_minutes_str = str(frequency_in_integer_minutes) + "T"

    return frequency_in_integer_minutes_str, frequency_in_integer_minutes
