import pytest
import pandas as pd
from .calculate_frequency_of_timseries_data import (
    calculate_frequency_in_integer_minutes,
)


def test_calculate_frequency_in_integer_minutes_raises_with_wrong_input_type():
    invalid_index = pd.RangeIndex(0, 10)
    with pytest.raises(TypeError) as e:
        calculate_frequency_in_integer_minutes(invalid_index)
    assert str(e.value) == "datetime_index must be of type pd.DatetimeIndex"


def test_calculate_frequency_in_integer_minutes_raises_with_empty_datetime_index():
    datetime_index = pd.DatetimeIndex([])
    with pytest.raises(ValueError) as e:
        calculate_frequency_in_integer_minutes(datetime_index)
    assert str(e.value) == "datetime_index must have at least 2 entries"


def test_calculate_frequency_in_integer_minutes_raises_with_non_monotonic_datetime_index():
    non_monotonic_datetime_index = pd.to_datetime(
        ["2023-01-01", "2023-01-03", "2023-01-02"]
    )
    with pytest.raises(ValueError) as e:
        calculate_frequency_in_integer_minutes(non_monotonic_datetime_index)
    assert str(e.value) == "datetime_index must be monotonically increasing"


def test_calculate_frequency_in_integer_minutes_passes_with_valid_input():
    datetime_index = pd.date_range(
        start="2023-01-01", periods=6, freq="15T"
    )  # 15-minute intervals
    expected_freq_str = "15T"
    expected_freq_minutes = 15

    freq_str, freq_minutes = calculate_frequency_in_integer_minutes(datetime_index)

    assert (
        freq_str == expected_freq_str
    ), f"Expected frequency string {expected_freq_str}, got {freq_str}"
    assert (
        freq_minutes == expected_freq_minutes
    ), f"Expected frequency in minutes {expected_freq_minutes}, got {freq_minutes}"
