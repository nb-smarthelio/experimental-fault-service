import logging

import pandas as pd

from ..validation import ValidationExecutor

logger = logging.getLogger(__name__)


class Reindexer:
    """
    Responsible for reindexing a pandas DataFrame to a specified target frequency.

    The Reindexer class provides functionality to either upsample or downsample
    a given DataFrame based on a specified frequency, handling the time zone
    consistency and validation of input data.

    Methods:
    --------
    create_target_index(start_time, end_time, freq):
        Creates a target datetime index with the specified frequency and timezone of the original index.

    run_reindexer(dataframe, target_freq):
        Reindexes the given dataframe to the target frequency.

    Raises:
    -------
    Exception:
        If validation of the target frequency fails.

    Examples:
    ---------
    reindexer = Reindexer()
    reindexed_df = reindexer.run_reindexer(df, pd.Timedelta(minutes=5))

    Notes:
            1. This will introduce new timestamps starting from YYYY-MM-DD 00:00:00 to YYYY-MM-DD 23:59:59,
            rounded to the nearest timestamp based on the target frequency.
            1. This will create NaNs for the new timestamps and retain the values against common timestamps.
    """

    def __init__(self):
        pass

    @staticmethod
    def create_target_index(start_time, end_time, target_freq):
        """
        Creates a target datetime index based on the start time, end time, and frequency.
        The timezone of the original index is used for the target index.

        Parameters:
        -----------
        start_time : datetime
            The start time of the target index.
        end_time : datetime
            The end time of the target index.
        target_freq : pd.Timedelta
            The frequency for the target index.

        Returns:
        --------
        pd.DatetimeIndex
            A DatetimeIndex with the specified frequency within the given time range and timezone of the original index.
        """

        timezone_of_original_index = start_time.tz
        return pd.date_range(
            start=start_time,
            end=end_time,
            freq=target_freq,
            tz=timezone_of_original_index,
        )

    def run_reindexer(
        self, dataframe: pd.DataFrame, target_freq: pd.Timedelta
    ) -> pd.DataFrame:
        """
        Reindex the dataframe to the target frequency.

        Parameters:
        -----------
        dataframe : pd.DataFrame
            The dataframe to be resampled.
        target_freq : pd.Timedelta
            The target frequency for resampling.

        Returns:
        --------
        pd.DataFrame
            The resampled dataframe.

        Raises:
        -------
        Exception
            If validation of the target frequency fails or other resampling issues occur.

        Notes:
            1. This will introduce new timestamps starting from YYYY-MM-DD 00:00:00 to YYYY-MM-DD 23:59:59,
            rounded to the nearest timestamp based on the target frequency.
            1. This will create NaNs for the new timestamps and retain the values against common timestamps.
        """
        if not isinstance(dataframe, pd.DataFrame):
            raise TypeError("Dataframe must be of type pd.DataFrame")
        if not isinstance(dataframe.index, pd.DatetimeIndex):
            raise TypeError("Index of dataframe must be of type pd.DatetimeIndex")
        # validate input
        try:
            validation_executor = ValidationExecutor(target_freq=target_freq)
            validation_executor.execute()
        except Exception as e:
            logger.error(f"Validation failed with error: {e}.")
            raise

        # Calculate the start and end time of the dataframe, replacing the time with 00:00 and 23:59 respectively.
        start_time = dataframe.index.min().replace(hour=0, minute=0)
        end_time = dataframe.index.max().replace(hour=23, minute=59)
        logger.debug(f"Start time: {start_time}, end time: {end_time}")
        # Create target index using the start and end time and target frequency. Timezone of the original index is used.
        target_index = self.create_target_index(start_time, end_time, target_freq)
        logger.debug(f"Target index: {target_index}")
        return dataframe.reindex(target_index)
