import pandas as pd
import pytest

from .timestream_data_reindexer import Reindexer


def test_create_target_index():
    start_time = pd.Timestamp("2023-01-01 00:00:00", tz="UTC")
    end_time = pd.Timestamp("2023-01-02 00:00:00", tz="UTC")
    freq = pd.Timedelta("1H")

    result = Reindexer.create_target_index(start_time, end_time, freq)

    assert isinstance(result, pd.DatetimeIndex), "Result should be a DatetimeIndex"
    assert len(result) == 25, "Index should have 25 hourly entries"
    assert result[0] == start_time, "First entry of index should match start time"
    assert (
        result[-1] <= end_time
    ), "Last entry of index should be less than or equal to end time"
    assert (
        result.tz == start_time.tz
    ), "Index should have the same timezone as start time"


def create_invalid_dataframe_with_integer_index():
    data = {"a": [1, 2, 3, 4, 5]}
    df = pd.DataFrame(data=data, index=[1, 2, 3, 4, 5])
    return df


def test_run_indexer_raises_with_invalid_dataframe():
    reindexer = Reindexer()
    invalid_dataframe = [1, 2, 3]
    freq = pd.Timedelta("1H")
    with pytest.raises(TypeError) as e:
        reindexer.run_reindexer(invalid_dataframe, freq)
    assert (str(e.value)) == "Dataframe must be of type pd.DataFrame"


def test_run_indexer_raises_with_invalid_index():
    reindexer = Reindexer()
    dataframe_with_invalid_index = create_invalid_dataframe_with_integer_index()
    freq = pd.Timedelta("1H")
    with pytest.raises(TypeError) as e:
        reindexer.run_reindexer(dataframe_with_invalid_index, freq)
    assert (str(e.value)) == "Index of dataframe must be of type pd.DatetimeIndex"


def test_run_reindexer_upsampling():
    reindexer = Reindexer()
    df = pd.DataFrame(
        {"values": range(60)}, index=pd.date_range("2023-01-01", periods=60, freq="15T")
    )
    target_freq = pd.Timedelta("5T")
    result = reindexer.run_reindexer(df, target_freq)
    assert isinstance(result, pd.DataFrame), "Result should be a DataFrame"
    assert (
        len(result) == 288
    ), "Upsampled DataFrame should have increased number of rows"
    assert (
        result.isna().sum().sum() > 0
    ), "Upsampled DataFrame should contain NaN values"
    assert (
        result.index.freq == target_freq
    ), "Upsampled DataFrame should have the target frequency"


def test_run_reindexer_downsampling():
    reindexer = Reindexer()
    df = pd.DataFrame(
        {"values": range(60)}, index=pd.date_range("2023-01-01", periods=60, freq="2T")
    )
    target_freq = pd.Timedelta("5T")
    result = reindexer.run_reindexer(df, target_freq)
    assert isinstance(result, pd.DataFrame), "Result should be a DataFrame"
    assert len(result.dropna()) < len(df), (
        "Downsampled DataFrame should have fewer rows after dropping newly added "
        "nan values"
    )
    assert (
        result.index.freq == target_freq
    ), "Downsampled DataFrame should have the target frequency"
