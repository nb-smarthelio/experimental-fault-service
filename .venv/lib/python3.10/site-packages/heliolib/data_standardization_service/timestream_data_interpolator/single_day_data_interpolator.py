import logging
import pytz
import pandas as pd
import datetime
from astral import LocationInfo
from .timestream_data_interpolator import Interpolator

logger = logging.getLogger(__name__)


class DailyDataInterpolator(Interpolator):
    """
    A class for interpolating missing values in a pandas DataFrame for a single day's data.

    This class extends from the Interpolator class and specifically handles the case where
    the DataFrame contains data for a single day. It applies interpolation considering
    factors like sunrise and sunset times if relevant to the data.

    Parameters:
    -----------
    interpolation_method : str
        The interpolation method to use.
    max_consecutive_nans_duration : pd.Timedelta
        The maximum duration of consecutive NaNs to allow before interpolating.
    location : LocationInfo
        An instance of LocationInfo representing the geographical location, required for sun-related interpolations.
    time_zone : str
        The timezone of the data, used to verify that the DataFrame is timezone-aware and matches the location.
        Also used to determine sunrise and sunset times.
    warning_threshold : float
        The fraction of data that can be excluded from interpolation before a warning is issued. Defaults to 0.1.

    Methods:
    --------
    run_interpolator(dataframe, **kwargs):
        Interpolates missing values for a single day's data.
    """

    def __init__(
        self,
        interpolation_method: str,
        max_consecutive_nans_duration: pd.Timedelta,
        location: LocationInfo,
        time_zone: str,
        warning_threshold: float,
    ):
        """
        Initializes the DailyDataInterpolator.

        Parameters:
        -----------
        interpolation_method : str
            The interpolation method to use.
        max_consecutive_nans_duration : pd.Timedelta
            The maximum duration of consecutive NaNs to allow before interpolating.
        location : LocationInfo
            An instance of LocationInfo representing the geographical location, required for sun-related interpolations.
        time_zone : str
            The timezone of the data, used to verify that the DataFrame is timezone-aware and matches the location.
            Also used to determine sunrise and sunset times.
        warning_threshold : float
            The fraction of data that can be excluded from interpolation before a warning is issued. Defaults to 0.1.

        Returns:
        --------
        None
        """
        super().__init__(
            interpolation_method,
            max_consecutive_nans_duration,
            location,
            time_zone,
            warning_threshold,
        )
        logger.info("Initializing DailyDataInterpolator")

    def run_interpolator(self, dataframe: pd.DataFrame, **kwargs) -> pd.DataFrame:
        """
        Interpolates missing values for a single day's data.

        This method applies interpolation on the DataFrame for a single day, taking into
        account the sunrise and sunset times if relevant. It uses the method specified in
        the interpolation_method parameter.

        Parameters:
        -----------
        dataframe : pd.DataFrame
            The DataFrame containing data of a single day.
        **kwargs :
            Additional keyword arguments accepted by pandas.DataFrame.interpolate.
            Refer to the pandas documentation for details on these arguments.

        Returns:
        --------
        pd.DataFrame
            A DataFrame with interpolated values for the single day.
        """
        self._validate_dataframe(dataframe)
        date_to_fetch_suntimes = self._extract_unique_date(dataframe)
        sunrise, sunset = self._get_sun_times_for_date(date=date_to_fetch_suntimes)
        interpolated_dataframe = self._interpolate_dataframe(
            dataframe, sunrise, sunset, **kwargs
        )
        result_dataframe = self._combine_with_unmasked_data(
            dataframe, interpolated_dataframe, sunrise, sunset
        )
        return result_dataframe

    def _validate_dataframe(self, dataframe: pd.DataFrame) -> None:
        """
        Validates the DataFrame to ensure it meets the requirements for interpolation.

        This method checks that the DataFrame's index is a timezone-aware DatetimeIndex
        and that the timezone matches the one provided during initialization.

        Parameters:
        -----------
        dataframe : pd.DataFrame
            The DataFrame to validate.

        Returns:
        --------
        None

        Raises:
        -------
        TypeError:
            If the DataFrame's index is not a DatetimeIndex.
        ValueError:
            If the DataFrame's index is not timezone-aware or if the timezone does not match.
        """
        if not isinstance(dataframe.index, pd.DatetimeIndex):
            raise TypeError("Dataframe index must be a DatetimeIndex.")
        if not dataframe.index.tzinfo:
            raise ValueError("Dataframe index must be timezone aware.")
        if str(dataframe.index.tz) != str(self.time_zone):
            raise ValueError("Dataframe timezone does not match the provided timezone.")
        self._warn_excessive_exclusion(dataframe)

    @staticmethod
    def _extract_unique_date(dataframe: pd.DataFrame) -> datetime.date:
        """
        Extracts the unique date from the DataFrame's index.

        This method ensures that the DataFrame contains data for only one day
        and returns the date for further processing.

        Parameters:
        -----------
        dataframe : pd.DataFrame
            The DataFrame from which to extract the date.

        Returns:
        --------
        datetime.date
            The unique date contained in the DataFrame.

        Raises:
        -------
        ValueError:
            If the DataFrame contains data for multiple days.
        """
        unique_dates_list = list(pd.unique(dataframe.index.date))
        if len(unique_dates_list) > 1 or len(unique_dates_list) == 0:
            raise ValueError("Dataframe should contain data for only one day.")
        return datetime.date.fromisoformat(str(unique_dates_list[0]))

    def _interpolate_dataframe(
        self,
        dataframe: pd.DataFrame,
        sunrise: datetime.datetime,
        sunset: datetime.datetime,
        **kwargs,
    ) -> pd.DataFrame:
        """
        Interpolates the DataFrame between sunrise and sunset times.

        This method applies the specified interpolation method to the data
        within the period between sunrise and sunset.

        Parameters:
        -----------
        dataframe : pd.DataFrame
            The DataFrame containing the data to be interpolated.
        sunrise : datetime.datetime
            The sunrise time for the day.
        sunset : datetime.datetime
            The sunset time for the day.
        **kwargs :
            Additional keyword arguments accepted by pandas.DataFrame.interpolate.

        Returns:
        --------
        pd.DataFrame
            The DataFrame with interpolated values between sunrise and sunset.
        """
        mask = (dataframe.index >= sunrise) & (dataframe.index <= sunset)
        logger.debug(f"Interpolating for {sunrise.date()}")
        return dataframe[mask].interpolate(
            method=self.interpolation_method, limit=self.maximum_gaps_allowed, **kwargs
        )

    @staticmethod
    def _combine_with_unmasked_data(
        dataframe: pd.DataFrame,
        interpolated_dataframe: pd.DataFrame,
        sunrise: datetime.datetime,
        sunset: datetime.datetime,
    ) -> pd.DataFrame:
        """
        Combines the interpolated data with the original unmasked data.

        This method combines the interpolated data within the sunrise and sunset times
        with the original data outside of this range, and sorts the resulting DataFrame.

        Parameters:
        -----------
        dataframe : pd.DataFrame
            The original DataFrame containing the complete data.
        interpolated_dataframe : pd.DataFrame
            The DataFrame containing the interpolated data between sunrise and sunset.
        sunrise : datetime.datetime
            The sunrise time for the day.
        sunset : datetime.datetime
            The sunset time for the day.

        Returns:
        --------
        pd.DataFrame
            The combined DataFrame with both the original and interpolated data.
        """
        unmasked_dataframe = dataframe[
            ~dataframe.index.isin(
                dataframe.between_time(str(sunrise.time()), str(sunset.time())).index
            )
        ]
        return pd.concat([unmasked_dataframe, interpolated_dataframe]).sort_index()
