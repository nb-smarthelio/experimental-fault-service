import logging
from astral import LocationInfo
import pandas as pd

from .single_day_data_interpolator import DailyDataInterpolator
from .timestream_data_interpolator import Interpolator

logger = logging.getLogger(__name__)


class MultipleDaysInterpolator(Interpolator):
    """
    A class for interpolating missing values in a pandas DataFrame that spans multiple days.

    This class extends from the Interpolator class and specifically handles the case where
    the DataFrame contains data covering several days. It applies daily interpolation
    using the DailyDataInterpolator for each unique day in the dataset.

    Parameters:
    -----------
    interpolation_method : str
        The interpolation method to use.
    max_consecutive_nans_duration : pd.Timedelta
        The maximum duration of consecutive NaNs to allow before interpolating.
    location : LocationInfo
        An instance of LocationInfo representing the geographical location, required for sun-related interpolations.
    time_zone : str
        The timezone of the data, used to verify that the DataFrame is timezone-aware and matches the location.
        Also used to determine sunrise and sunset times.
    warning_threshold : float
        The fraction of data that can be excluded from interpolation before a warning is issued. Defaults to 0.1.

    Methods:
    --------
    run_interpolator(dataframe, **kwargs):
        Interpolates missing values for data spanning multiple days.

    Examples:
    ---------
    # Assuming `df` is a pandas DataFrame with multiple days' data
    interpolator = MultipleDaysInterpolator(interpolation_method='linear',
    max_consecutive_nans_duration=pd.Timedelta(minutes=5), latitude=40.0, longitude=-105.0, warning_threshold=0.5)
    interpolated_df = interpolator.run_interpolator(df)
    """

    def __init__(
        self,
        interpolation_method: str,
        max_consecutive_nans_duration: pd.Timedelta,
        location: LocationInfo,
        time_zone: str,
        warning_threshold: float,
    ):
        """
        Initializes the MultipleDaysInterpolator.

        Inherits all initialization parameters from the base Interpolator class.
        """
        super().__init__(
            interpolation_method,
            max_consecutive_nans_duration,
            location,
            time_zone,
            warning_threshold,
        )
        logger.debug("Initializing MultipleDaysInterpolator")

    def run_interpolator(self, dataframe: pd.DataFrame, **kwargs):
        """
        Interpolates missing values for data spanning multiple days.

        This method loops through each unique day in the DataFrame and applies
        the DailyDataInterpolator to interpolate missing values for each day.

        Parameters:
        -----------
        dataframe : pd.DataFrame
            The DataFrame containing multiple days' data.
        **kwargs :
            Additional keyword arguments accepted by pandas.DataFrame.interpolate.
            Refer to the pandas documentation for details on these arguments.

        Returns:
        --------
        pd.DataFrame
            A DataFrame with interpolated values, covering the multiple days.

        Example:
        --------
        # Assuming `df` is a pandas DataFrame with multiple days' data
        interpolator = MultipleDaysInterpolator(interpolation_method='linear')
        interpolated_df = interpolator.run_interpolator(df)
        """
        unique_dates = pd.to_datetime(dataframe.index.date).unique()
        logger.debug(f"Found {len(unique_dates)} unique dates in the dataset")
        interpolated_dfs = []

        for date in unique_dates:
            # Filter the DataFrame for each day and apply DailyDataInterpolator
            daily_mask = dataframe.index.normalize().date == pd.to_datetime(date).date()
            daily_df = dataframe[daily_mask]
            daily_interpolated = DailyDataInterpolator(
                self.interpolation_method,
                self.max_consecutive_nans_duration,
                self.location,
                self.time_zone,
                self.warning_threshold,
            ).run_interpolator(daily_df, **kwargs)
            interpolated_dfs.append(daily_interpolated)

        return pd.concat(interpolated_dfs)
