import pytest

from .validation import *


# Test for TargetFrequencyValidator


def test_validate_whether_target_freq_is_correct_type_passes_with_valid_target_freq():
    valid_target_freq = pd.Timedelta(minutes=5)
    target_frequency_validator = TargetFrequencyValidator()
    target_frequency_validator.validate_whether_target_freq_is_correct_type(
        valid_target_freq
    )


def test_validate_whether_target_freq_is_correct_type_raises_with_invalid_target_freq():
    invalid_target_freq = 5
    target_frequency_validator = TargetFrequencyValidator()
    with pytest.raises(ValueError) as e:
        target_frequency_validator.validate_whether_target_freq_is_correct_type(
            invalid_target_freq
        )
    assert (
        str(e.value) == "target_freq must be a Pandas Timedelta, pd.Timedelta object."
    )


# Test for InterpolationMethodValidator


def test_validate_whether_interpolation_method_is_acceptable_passes_with_valid_interpolation_method():
    valid_interpolation_method = "linear"
    interpolation_method_validator = InterpolationMethodValidator()
    interpolation_method_validator.validate_whether_interpolation_method_is_acceptable(
        valid_interpolation_method
    )


def test_validate_whether_interpolation_method_is_acceptable_raises_with_invalid_interpolation_method():
    invalid_interpolation_method = "linears"
    interpolation_method_validator = InterpolationMethodValidator()
    ALLOWED_INTERPOLATION_METHODS = interpolation_method_validator.ALLOWED_METHODS
    with pytest.raises(ValueError) as e:
        interpolation_method_validator.validate_whether_interpolation_method_is_acceptable(
            invalid_interpolation_method
        )
    assert (
        str(e.value)
        == f"Interpolation method must be one of the following: {ALLOWED_INTERPOLATION_METHODS}"
    )


# Test for TimeDeltaValidator


def test_validate_whether_max_consecutive_nans_duration_is_correct_type_passes_with_valid_timedelta():
    valid_max_consecutive_nans_duration = pd.Timedelta(minutes=5)
    time_delta_validator = TimeDeltaValidator()
    time_delta_validator.validate_whether_max_consecutive_nans_duration_is_correct_type(
        valid_max_consecutive_nans_duration
    )


def test_validate_whether_max_consecutive_nans_duration_is_correct_type_raises_with_invalid_timedelta():
    invalid_max_consecutive_nans_duration = 5
    time_delta_validator = TimeDeltaValidator()
    with pytest.raises(ValueError) as e:
        time_delta_validator.validate_whether_max_consecutive_nans_duration_is_correct_type(
            invalid_max_consecutive_nans_duration
        )
    assert (
        str(e.value)
        == "max_consecutive_nans_duration must be a Pandas Timedelta, pd.Timedelta object."
    )


# Test for WarningThresholdValidator


def test_validate_whether_warning_threshold_is_correct_type_passes_with_valid_warning_threshold():
    valid_warning_threshold = 0.5
    warning_threshold_validator = WarningThresholdValidator()
    warning_threshold_validator.validate_whether_warning_threshold_is_meaningful(
        valid_warning_threshold
    )


def test_validate_whether_warning_threshold_is_correct_type_raises_with_invalid_warning_threshold():
    invalid_warning_threshold = 2
    warning_threshold_validator = WarningThresholdValidator()
    LOWER_BOUND = warning_threshold_validator.LOWER_BOUND
    UPPER_BOUND = warning_threshold_validator.UPPER_BOUND
    with pytest.raises(ValueError) as e:
        warning_threshold_validator.validate_whether_warning_threshold_is_meaningful(
            invalid_warning_threshold
        )
    assert str(e.value) == (
        f"warning_threshold must be a float between {WarningThresholdValidator.LOWER_BOUND} and "
        f"{WarningThresholdValidator.UPPER_BOUND}."
    )


# Test for ValidationExecutor


def test_validation_executor_passes_with_valid_input():
    valid_target_freq = pd.Timedelta(minutes=5)
    valid_max_consecutive_nans_duration = pd.Timedelta(minutes=5)
    valid_warning_threshold = 0.5
    valid_interpolation_method = "linear"
    validation_executor = ValidationExecutor(
        target_freq=valid_target_freq,
        max_consecutive_nans_duration=valid_max_consecutive_nans_duration,
        warning_threshold=valid_warning_threshold,
        interpolation_method=valid_interpolation_method,
    )
    validation_executor.execute()


def test_validation_executor_raises_with_invalid_validator():
    valid_target_freq = pd.Timedelta(minutes=5)
    valid_max_consecutive_nans_duration = pd.Timedelta(minutes=5)
    valid_warning_threshold = 0.5
    valid_interpolation_method = "linear"
    invalid_validator = "invalid_validator"
    validation_executor = ValidationExecutor(
        target_freq=valid_target_freq,
        max_consecutive_nans_duration=valid_max_consecutive_nans_duration,
        warning_threshold=valid_warning_threshold,
        interpolation_method=valid_interpolation_method,
        invalid_validator=invalid_validator,
    )
    with pytest.raises(ValueError) as e:
        validation_executor.execute()
    assert str(e.value) == "No validator found for variable: invalid_validator"


def test_validation_executor_raises_with_invalid_validator_with_value_None():
    valid_target_freq = None
    valid_max_consecutive_nans_duration = pd.Timedelta(minutes=5)
    valid_warning_threshold = 0.5
    valid_interpolation_method = "linear"
    validation_executor = ValidationExecutor(
        target_freq=valid_target_freq,
        max_consecutive_nans_duration=valid_max_consecutive_nans_duration,
        warning_threshold=valid_warning_threshold,
        interpolation_method=valid_interpolation_method,
    )
    with pytest.raises(ValueError) as e:
        validation_executor.execute()
    assert str(e.value) == "Value for target_freq cannot be None"
