import os
import pytest
import pandas as pd
from pandas._testing import assert_frame_equal

from heliolib.irradiance_transposition_service import TransposeIrradiance

latitude = 46.1902
longitude = 6.02776
altitude = 354.0
surface_tilt = 22
surface_azimuth = 180


def get_ghi_data_for_transposition_testing():
    script_directory = os.path.dirname(os.path.abspath(__file__))
    mock_data_file = os.path.join(
        script_directory, "mock_data/mock_data_for_transposed_irradiance_utc.csv"
    )
    ghi_dataframe = pd.read_csv(
        mock_data_file,
        parse_dates=True,
        index_col=0,
    )
    ghi_dataframe.index = pd.to_datetime(ghi_dataframe.index)
    ghi_dataframe.index = ghi_dataframe.index.tz_convert("UTC")
    ghi_dataframe.index.freq = "10T"
    ghi_dataframe = ghi_dataframe.round(3)
    ghi_dataframe = ghi_dataframe[["GHI"]]
    return ghi_dataframe


# Global variables
df = get_ghi_data_for_transposition_testing()


@pytest.fixture
def transposition_instance():
    return TransposeIrradiance(latitude, longitude, altitude, df)


def get_mock_data_for_testing():
    script_directory = os.path.dirname(os.path.abspath(__file__))
    mock_data_file = os.path.join(
        script_directory, "mock_data/mock_data_for_transposed_irradiance_utc.csv"
    )
    mock_data = pd.read_csv(
        mock_data_file,
        parse_dates=True,
        index_col=0,
    )
    mock_data.index = pd.to_datetime(mock_data.index)
    mock_data.index = mock_data.index.tz_convert("UTC")
    mock_data.index.freq = "10T"
    mock_data = mock_data.round(0)
    mock_data = mock_data[["Gpoa"]]
    return mock_data


def test_transpose_irradiance_init_with_valid_inputs():
    try:
        transposition_obj = TransposeIrradiance(latitude, longitude, altitude, df)
    except Exception as e:
        pytest.fail(f"Failed to initialize TransposeIrradiance with valid inputs: {e}")

    assert transposition_obj.lat == latitude
    assert transposition_obj.long == longitude
    assert transposition_obj.alt == altitude
    assert transposition_obj.df.equals(df)


def test_transpose_irradiance_init_with_invalid_inputs():
    with pytest.raises(ValueError):
        TransposeIrradiance(91, longitude, altitude, df)

    with pytest.raises(ValueError):
        TransposeIrradiance(latitude, 181, altitude, df)


def test_get_transposition_irradiance_with_utc_aware_index(transposition_instance):
    transposed_irradiance = transposition_instance.utc_transposition_model(
        surface_tilt, surface_azimuth
    )
    transposed_irradiance = transposed_irradiance[["Gpoa"]]
    transposed_irradiance = transposed_irradiance.round(0)
    assert transposed_irradiance.index.tz.__str__() == "UTC"

    # compare clear sky generated values with mock data
    mock_data = get_mock_data_for_testing()
    assert_frame_equal(transposed_irradiance, mock_data)


def test_get_transposition_irradiance_with_non_utc_aware_index():
    df.index = df.index.tz_convert("America/Los_Angeles")
    transposition_instance = TransposeIrradiance(latitude, longitude, altitude, df)

    with pytest.raises(ValueError) as error:
        transposition_instance.utc_transposition_model(surface_tilt, surface_azimuth)

    assert (
        str(error.value) == "The DataFrame must have a timezone aware index set to UTC."
    )
