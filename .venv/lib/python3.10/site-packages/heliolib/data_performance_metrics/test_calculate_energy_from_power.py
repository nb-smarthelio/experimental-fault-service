import pandas as pd
import numpy as np
import pytest
from .calculate_energy_from_power import calculate_energy_from_power

FREQUENCY = 5


def get_power_series_data_with_non_null_values():
    """
    Generate a power series with non-null values.
    """
    power_series = pd.Series(
        [10, 20, 30, 40, 50],
        index=[
            pd.to_datetime("2024-01-01 00:00:00"),
            pd.to_datetime("2024-01-01 00:05:00"),
            pd.to_datetime("2024-01-01 00:10:00"),
            pd.to_datetime("2024-01-01 00:15:00"),
            pd.to_datetime("2024-01-01 00:20:00"),
        ],
    )
    return power_series


def get_power_series_with_null_values():
    """
    Generate a power series with some null values.
    """
    power_series = pd.Series(
        [10, np.nan, 30, 40, np.nan],
        index=[
            pd.to_datetime("2024-01-01 00:00:00"),
            pd.to_datetime("2024-01-01 00:05:00"),
            pd.to_datetime("2024-01-01 00:10:00"),
            pd.to_datetime("2024-01-01 00:15:00"),
            pd.to_datetime("2024-01-01 00:20:00"),
        ],
    )
    return power_series


def get_power_series_data_with_one_minute_frequency():
    """
    Generate a power series with non-null values.
    """
    power_series = pd.Series(
        [1, 2, 3, 4, 5],
        index=[
            pd.to_datetime("2024-01-01 00:00:00"),
            pd.to_datetime("2024-01-01 00:01:00"),
            pd.to_datetime("2024-01-01 00:02:00"),
            pd.to_datetime("2024-01-01 00:03:00"),
            pd.to_datetime("2024-01-01 00:04:00"),
        ],
    )
    return power_series


def get_empty_power_series():
    """
    Generate an empty power series.
    """
    return pd.Series([])


def get_power_series_with_single_value():
    """
    Generate a power series with non-null values.
    """
    return pd.Series([10], index=[pd.to_datetime("2024-01-01 00:00:00")])


def test_calculate_energy_from_power_zero_freq():
    """
    Test if calculate_energy_from_power raises a ValueError for zero frequency.
    """
    power_series = get_power_series_data_with_non_null_values()
    frequency = 0
    with pytest.raises(ValueError):
        calculate_energy_from_power(power_series, frequency)


def test_calculate_energy_from_power_non_series_power_series():
    """
    Test if calculate_energy_from_power raises a TypeError for non-series power series.
    """
    power_series = [10, 20, 30]
    with pytest.raises(TypeError):
        calculate_energy_from_power(power_series, FREQUENCY)


def test_calculate_energy_from_power_non_numeric_freq():
    """
    Test if calculate_energy_from_power raises a TypeError for non-numeric frequency.
    """
    power_series = get_power_series_data_with_non_null_values()
    frequency = "10"
    with pytest.raises(TypeError):
        calculate_energy_from_power(power_series, frequency)


def test_calculate_energy_from_power_nan_values():
    """
    Test if calculate_energy_from_power raises a ValueError for series with NaN values.
    """
    power_series = get_power_series_with_null_values()
    with pytest.raises(ValueError):
        calculate_energy_from_power(power_series, FREQUENCY)


def test_calculate_energy_from_power_with_non_null_series():
    """
    Test calculate_energy_from_power with a non-null power series and check the result.
    """
    power_series = get_power_series_data_with_non_null_values()
    result = calculate_energy_from_power(power_series, FREQUENCY)
    expected_result = pd.Series(
        [np.nan, 1.25, 2.083333333333333, 2.9166666666666665, 3.75],
        index=[
            pd.to_datetime("2024-01-01 00:00:00"),
            pd.to_datetime("2024-01-01 00:05:00"),
            pd.to_datetime("2024-01-01 00:10:00"),
            pd.to_datetime("2024-01-01 00:15:00"),
            pd.to_datetime("2024-01-01 00:20:00"),
        ],
    )
    result_round = result.round(2)
    expected_result_round = expected_result.round(2)
    pd.testing.assert_series_equal(result_round, expected_result_round)


def test_calculate_energy_from_power_empty_series():
    """
    Test calculate_energy_from_power with an empty power series.
    """
    power_series = get_empty_power_series()
    with pytest.raises(ValueError):
        calculate_energy_from_power(power_series, FREQUENCY)


def test_calculate_energy_from_power_single_value():
    """
    Test if calculate_energy_from_power raises a ValueError for a series with a single value.
    """
    power_series = get_power_series_with_single_value()
    with pytest.raises(ValueError):
        calculate_energy_from_power(power_series, FREQUENCY)


def test_calculate_energy_from_power_with_non_default_inputs():
    """
    Test calculate_energy_from_power when time_conversion_factor and shift_index
    are provided as inputs.
    """
    power_series = get_power_series_data_with_one_minute_frequency()
    time_conversion_factor = 30
    shift_index = 2
    frequency = 1
    result = calculate_energy_from_power(
        power_series, frequency, time_conversion_factor, shift_index
    )
    expected_result = pd.Series(
        [np.nan, np.nan, 0.06666667, 0.1, 0.13333333],
        index=[
            pd.to_datetime("2024-01-01 00:00:00"),
            pd.to_datetime("2024-01-01 00:01:00"),
            pd.to_datetime("2024-01-01 00:02:00"),
            pd.to_datetime("2024-01-01 00:03:00"),
            pd.to_datetime("2024-01-01 00:04:00"),
        ],
    )
    result_round = result.round(2)
    expected_result_round = expected_result.round(2)
    pd.testing.assert_series_equal(result_round, expected_result_round)
