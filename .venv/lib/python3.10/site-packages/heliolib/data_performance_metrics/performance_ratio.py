import logging
import pandas as pd

logger = logging.getLogger(__name__)

IRRADIANCE_THRESHOLD = 150
HIGH_PR_VALUE_THRESHOLD = 0.25
IRRADIANCE_KEY = "G"
POWER_KEY = "P"
EXPECTED_POWER_KEY = "P_exp_noct_degradation"


class PerformanceRatio:
    """
    Calculate Performance Ratio (PR) for solar power generation data.

    Performance Ratio is a measure of how effectively a solar power system is converting sunlight into electricity.
    This class calculates PR based on input data containing irradiance, actual power, and expected power.

    Methods
    -------
        - performance_ratio_nrel(input_data): Calculate daily Performance Ratio.

    """

    def __init__(
        self,
        power_key=POWER_KEY,
        irradiance_key=IRRADIANCE_KEY,
        expected_power_key=EXPECTED_POWER_KEY,
    ):
        self.power_key = power_key
        self.irradiance_key = irradiance_key
        self.expected_power_key = expected_power_key

    def _validate_all_required_keys_are_present_in_input_data(self, input_data):
        """
        Validate if all required data keys are present in the input data.

        Parameters
        ----------
            input_data (pd.DataFrame): Input data containing irradiance, actual power, and expected power.

        Raises
        ------
            KeyError: If any of the required keys are missing in the input data.

        Returns
        --------
            None
        """

        curve_level = input_data.columns.get_level_values(level="curve")

        if self.irradiance_key not in curve_level:
            raise KeyError(
                f"Irradiance ({self.irradiance_key}) data is unavailable in input data."
            )

        if self.power_key not in curve_level:
            raise KeyError(
                f"Power ({self.power_key}) data is unavailable in input data."
            )

        if self.expected_power_key not in curve_level:
            raise KeyError(
                f"Expected Power ({self.expected_power_key}) data is unavailable in input data."
            )

    def performance_ratio_nrel(self, input_data):
        """
        Calculate daily Performance Ratio (PR) based on input data.

        PR is calculated as the ratio of actual power to expected power for each day in the input data.

        Parameters
        ----------
            input_data (pd.DataFrame): Input data containing irradiance, actual power, and expected power.

        Returns
        -------
            pd.Series: A pandas Series containing daily Performance Ratio values.
        """

        self._validate_all_required_keys_are_present_in_input_data(input_data)

        power = input_data.xs(self.power_key, axis=1, level="curve")
        expected_power = input_data.xs(self.expected_power_key, axis=1, level="curve")
        irradiance = input_data.xs(self.irradiance_key, axis=1, level="curve")

        valid = ~power.isna()
        valid = valid & ~expected_power.isna()
        valid = valid & (irradiance > 0)
        logger.info(
            "PerformanceRatio: Filtered data for nan values in power and expected power and irradiance "
            "greater than zero."
        )

        input_power_daily = power[valid].groupby(pd.Grouper(freq="D")).sum()
        expected_power_daily = expected_power[valid].groupby(pd.Grouper(freq="D")).sum()

        daily_PR = input_power_daily / expected_power_daily

        # Raise Warning if more than X% values of PR are above threshold
        if (
            daily_PR[daily_PR > 0.95].count().sum() / daily_PR.count().sum()
        ) > HIGH_PR_VALUE_THRESHOLD:
            print(
                "Warning: More than 20% of the total daily PR values were found to be "
                "higher than 0.95 "
            )

        daily_PR = daily_PR[daily_PR < 1]

        return daily_PR
