import os
import pandas as pd
import requests


class RainDataFetcher:
    """
    A utility class to fetch rain data from Visual Crossing (VC) or AgroMeteo.

    Attributes:
        VC_API_KEY (str): The API key for Visual Crossing.
        VC_BASE_URL (str): The base URL for Visual Crossing API endpoints.
    """

    def __init__(self):
        self.VC_BASE_URL = None
        self.VC_API_KEY = None

    def set_VC_secrets(self, api_key=None, base_url=None):
        """
        Set the API key and base URL for Visual Crossing.

        Args:
            api_key (str, optional): The API key for Visual Crossing. Defaults to environment variable VC_API_KEY.
            base_url (str, optional): The base URL for Visual Crossing. Defaults to environment variable VC_BASE_URL.

        Raises:
            ValueError: If the API key or base URL is not provided and not found in environment variables.
        """
        self.VC_API_KEY = api_key or os.environ.get("VC_API_KEY")
        self.VC_BASE_URL = base_url or os.environ.get("VC_BASE_URL")

        if not self.VC_API_KEY or not self.VC_BASE_URL:
            raise ValueError(
                "VC secrets not set. Ensure environment variables or provide them manually."
            )

    def from_VC(self, start_date, end_date, latitude, longitude):
        """
        Fetch rain data from Visual Crossing for given dates and location.

        Args:
            start_date (datetime.date): The start date for fetching data.
            end_date (datetime.date): The end date for fetching data.
            latitude (float): Latitude of the location.
            longitude (float): Longitude of the location.

        Returns:
            pd.DataFrame: A DataFrame with datetime as index and rain data in column "PRCP".

        Raises:
            ValueError: If the VC secrets are not set.
        """
        if not hasattr(self, "VC_API_KEY") or not hasattr(self, "VC_BASE_URL"):
            raise ValueError("VC secrets not set. Use `set_VC_secrets` method first.")

        start_date = start_date.strftime("%Y-%m-%d")
        end_date = end_date.strftime("%Y-%m-%d")
        response = requests.get(
            f"{self.VC_BASE_URL}/{latitude},{longitude}/{start_date}/{end_date}?unitGroup=metric&key={self.VC_API_KEY}&include=days"
        )
        data = response.json()
        try:
            df = pd.DataFrame(data["days"])
            df["datetime"] = pd.to_datetime(df["datetime"])
            df.set_index("datetime", inplace=True)
            df_rain = df[["precip"]]
            df_rain.columns = ["PRCP"]
            df_rain = df_rain.apply(pd.to_numeric)
        except Exception as e:
            print(f"ERROR! Unable to fetch VC Data\n : {e}")
            return None
        return df_rain

    @staticmethod
    def from_agrometeo(start_date, end_date, station_id):
        """
        Fetch historical rain data from AgroMeteo Weather Stations in Switzerland.

        Args:
            start_date (str): The start date for fetching data in format "YYYY-MM-DD".
            end_date (str): The end date for fetching data in format "YYYY-MM-DD".
            station_id (int): The station ID of the AgroMeteo weather station.

        Returns:
            pd.DataFrame: A DataFrame with datetime as index and rain data in column "PRCP".
        """
        BASE_URL = f"https://www.agrometeo.ch/backend/api/meteo/data?from={start_date}&to={end_date}&scale=day&stations={str(station_id)}&sensors=6%3Asum&language=it"
        response = requests.get(BASE_URL)
        response_json = response.json()
        try:
            data = pd.json_normalize(response_json["data"])
            data.columns = ["datetime", "PRCP"]
            data.set_index("datetime", inplace=True)
            data.index = pd.to_datetime(data.index)
            data = data.apply(pd.to_numeric)
        except Exception as e:
            print(f"ERROR! Unable to fetch AgroMeteo Data\n {e}")
            return None
        return data


# 1. Create an instance of the RainDataFetcher
# fetcher = RainDataFetcher()
#
# # 2. Set VC secrets from environment variables
# fetcher.set_VC_secrets()  # No need to provide args since they are in env vars
#
# # 3. Fetch rain data from VC
# start_date = datetime.date(2023, 10, 1)
# end_date = datetime.date(2023, 10, 31)
# latitude = 47.3769  # Example for Zurich, Switzerland
# longitude = 8.5417
#
# vc_data = fetcher.from_VC(start_date, end_date, latitude, longitude)
#
# # 4. Fetch rain data from AgroMeteo
# station_id = 12345
# agro_data = RainDataFetcher.from_agrometeo(str(start_date), str(end_date), station_id)
