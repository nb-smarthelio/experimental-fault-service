import os

import pandas as pd
import pytest

from .csv_data_extraction import CSVDataExtractor


def test_validate_csv_data_extraction_raises_with_invalid_csv_path():
    invalid_csv_path = "test.csv"
    valid_length_of_header = 1
    with pytest.raises(ValueError) as e:
        CSVDataExtractor(invalid_csv_path, length_of_header=valid_length_of_header)
    assert str(e.value) == "Please provide an absolute path for the csv_path."


def test_validate_csv_data_extraction_raises_with_non_existent_csv_path():
    non_existent_csv_path = "/test.csv"
    valid_length_of_header = 1
    with pytest.raises(FileNotFoundError) as e:
        CSVDataExtractor(non_existent_csv_path, length_of_header=valid_length_of_header)
    assert str(e.value) == f"The path {non_existent_csv_path} does not exist."


def test_validate_csv_data_extraction_raises_with_non_csv_file_with_absolute_path():
    non_csv_file_path = os.path.join(
        os.path.dirname(__file__), "test_data_excel_data_extraction.xlsx"
    )
    valid_length_of_header = 1
    with pytest.raises(ValueError) as e:
        CSVDataExtractor(non_csv_file_path, length_of_header=valid_length_of_header)
    assert str(e.value) == "The file must be a CSV file."


def test_validate_csv_data_extraction_raises_with_invalid_type_length_of_header():
    valid_csv_path = os.path.join(
        os.path.dirname(__file__), "test_data_csv_data_extraction.csv"
    )
    invalid_length_of_header = "1"
    with pytest.raises(TypeError) as e:
        CSVDataExtractor(valid_csv_path, length_of_header=invalid_length_of_header)
    assert str(e.value) == "length_of_header must be an integer."


def test_validate_csv_data_extraction_raises_with_zero_length_of_header():
    valid_csv_path = os.path.join(
        os.path.dirname(__file__), "test_data_csv_data_extraction.csv"
    )
    invalid_length_of_header = 0
    with pytest.raises(ValueError) as e:
        CSVDataExtractor(valid_csv_path, length_of_header=invalid_length_of_header)
    assert str(e.value) == "length_of_header must be a positive integer."


def test_initialisation_csv_data_extraction_with_valid_inputs():
    valid_csv_path = os.path.join(
        os.path.dirname(__file__), "test_data_csv_data_extraction.csv"
    )
    valid_length_of_header = 3
    extractor = CSVDataExtractor(
        valid_csv_path, length_of_header=valid_length_of_header
    )
    assert extractor.csv_path == valid_csv_path
    assert extractor.length_of_header == valid_length_of_header


def test_read_data_csv_data_extraction_with_valid_inputs():
    valid_csv_path = os.path.join(
        os.path.dirname(__file__), "test_data_csv_data_extraction.csv"
    )
    valid_length_of_header = 3
    extractor = CSVDataExtractor(
        valid_csv_path, length_of_header=valid_length_of_header
    )
    data = extractor.read_data_as_pandas_dataframe()
    assert isinstance(data, pd.DataFrame)
    assert isinstance(data.index, pd.DatetimeIndex)
    assert isinstance(data.columns, pd.MultiIndex)
    assert len(data.columns[0]) == 3  # 3 levels in the column index
