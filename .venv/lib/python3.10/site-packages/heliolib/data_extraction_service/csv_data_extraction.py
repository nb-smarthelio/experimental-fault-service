import logging
import os

import pandas as pd

logger = logging.getLogger(__name__)


class CSVDataExtractor:
    """
    A class to extract data exclusively from a CSV file, inheriting from AbstractDataExtractor.
    This class provides methods to fetch data from a CSV file which contains timeseries data
    in multilevel columns SH's format.

    The expected CSV data format (example rows shown):
    +--------------------------+-----+-----+------+------+-----+-----+
    | datetime                 | 276 | 276 | 276  | 276  | 276 | 276 |
    |                          | 911 | 911 | 911  | 911  | 912 | 912 |
    |                          | I   | P   | P-AC | V    | I   | P   |
    +--------------------------+-----+-----+------+------+-----+-----+
    | 2023-11-05 01:00:00+01:00|  0  |  0  |  0   |  0   |  0  |  0  |
    | 2023-11-05 01:15:00+01:00|  0  |  0  |  0   |  0   |  0  |  0  |
    | 2023-11-05 01:30:00+01:00|  0  |  0  |  0   |  0   |  0  |  0  |
    | 2023-11-05 01:45:00+01:00|  0  |  0  |  0   |  0   |  0  |  0  |
    | 2023-11-05 02:00:00+01:00|  0  |  0  |  0   |  0   |  0  |  0  |
    +--------------------------+-----+-----+------+------+-----+-----+

    Parameters
    ----------
    csv_path : Union[str, IO]
        Path to the CSV file or a file-like object.
    length_of_header : int
        Number of header rows in the CSV file.

    Methods
    -------
    read_data_as_pandas_dataframe() : pandas.DataFrame
        Reads and returns data from the specified CSV source as a pandas DataFrame.

    Examples
    --------
    extractor = CSVDataExtractor(csv_path="absolute_path/to/file.csv", length_of_header=3)
    or
    with open("absolute_path/to/file.csv", "r") as f:
        extractor = CSVDataExtractor(csv_source=f, length_of_header=3)
    data = extractor.read_data_as_pandas_dataframe()
    """

    def __init__(self, csv_path: str, length_of_header: int):
        """
        Initializes a new instance of the CSVDataExtractor class.

        Parameters
        ----------
        csv_path : str
            Path to the CSV file.
        length_of_header : int
            Number of header rows in the CSV file.

        Raises
        ------
        ValueError
            If the csv_path is not an absolute path, or not a CSV file.
            If length_of_header is not an integer.
        FileNotFoundError
            If the csv_path does not exist.
        TypeError
            If length_of_header is not an integer.
        """
        logger.info("Initializing CSVDataExtractor")
        if isinstance(csv_path, str):
            self._validate_csv_path(csv_path)
        if not isinstance(length_of_header, int):
            raise TypeError("length_of_header must be an integer.")
        if length_of_header <= 0:
            raise ValueError("length_of_header must be a positive integer.")
        self.csv_path = csv_path
        self.length_of_header = length_of_header

    @staticmethod
    def _validate_csv_path(csv_path):
        """
        Validates the provided CSV path.

        Parameters
        ----------
        csv_path : str
            The path to the CSV file.

        Raises
        ------
        ValueError
            If the csv_path is not an absolute path, or not a CSV file.
        FileNotFoundError
            If the csv_path does not exist.
        """
        if not os.path.isabs(csv_path):
            raise ValueError("Please provide an absolute path for the csv_path.")

        if not os.path.exists(csv_path):
            raise FileNotFoundError(f"The path {csv_path} does not exist.")

        if not csv_path.endswith(".csv"):
            raise ValueError("The file must be a CSV file.")

    def read_data_as_pandas_dataframe(self, **kwargs):
        """
        Reads data from a CSV file or a file-like object and returns it as a pandas DataFrame.

        Raises
        ------
        Exception
            If there is an issue in reading the CSV file or the file-like object.

        Returns
        -------
        pandas.DataFrame
            The loaded data from the CSV file or the file-like object.

        Notes
        -----
        The method uses pandas.read_csv() to read the CSV file.
        The method uses the following arguments to read the data:
        index_col=0, header=number_of_header_rows, parse_dates=True
        """
        number_of_header_rows = list(range(self.length_of_header))
        try:
            logger.debug(f"Reading data from file {self.csv_path}")
            df = pd.read_csv(
                self.csv_path,
                index_col=0,
                header=number_of_header_rows,
                parse_dates=True,
                **kwargs,
            )
            df.index = pd.to_datetime(df.index)
            return df
        except Exception as e:
            logger.exception(f"Failed to fetch data: {e}")
            raise
