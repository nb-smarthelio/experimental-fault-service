import logging
import os

import pandas as pd

logger = logging.getLogger(__name__)


class ExcelDataExtractor:
    """
    A class to extract data from an XLSX file, inheriting from AbstractDataExtractor.

    This class provides methods to fetch data from an XLSX file which contains timeseries data
    in multilevel columns SH's format.

    The expected Excel data format (example rows shown):
    +--------------------------+-----+-----+------+------+-----+-----+
    | datetime                 | 276 | 276 | 276  | 276  | 276 | 276 |
    |                          | 911 | 911 | 911  | 911  | 912 | 912 |
    |                          | I   | P   | P-AC | V    | I   | P   |
    +--------------------------+-----+-----+------+------+-----+-----+
    | 2023-11-05 01:00:00+01:00|  0  |  0  |  0   |  0   |  0  |  0  |
    | 2023-11-05 01:15:00+01:00|  0  |  0  |  0   |  0   |  0  |  0  |
    | 2023-11-05 01:30:00+01:00|  0  |  0  |  0   |  0   |  0  |  0  |
    | 2023-11-05 01:45:00+01:00|  0  |  0  |  0   |  0   |  0  |  0  |
    | 2023-11-05 02:00:00+01:00|  0  |  0  |  0   |  0   |  0  |  0  |
    +--------------------------+-----+-----+------+------+-----+-----+
    Parameters
    ----------
    xlsx_path : str
        The path to the XLSX file.

    Methods
    -------
    read_data_as_pandas_dataframe() : pandas.DataFrame
        Fetches data from the XLSX file.

    Examples
    --------
    # Example: Extracting data from a CSV file
    extractor = CSVDataExtractor(csv_path="path/to/file.csv", length_of_header=3)
    data = extractor.read_data_as_pandas_dataframe()
    """

    def __init__(self, xlsx_path: str, length_of_header: int):
        """
        Initializes a new instance of the class.

        Parameters
        ----------
        xlsx_path : str
            Path to the XLSX file.
        length_of_header : int
            Number of header rows in the XLSX file.

        Raises
        ------
        ValueError
            If the provided xlsx_path is not an absolute path or not a file.
        FileNotFoundError
            If the provided xlsx_path does not exist.
        """
        self._validate_xlsx_path(xlsx_path)
        if not isinstance(length_of_header, int):
            raise TypeError("length_of_header must be an integer.")
        if length_of_header <= 0:
            raise ValueError("length_of_header must be a positive integer.")
        self.xlsx_path = xlsx_path
        self.length_of_header = length_of_header

    @staticmethod
    def _validate_xlsx_path(xlsx_path):
        """
        Validate the provided XLSX path.

        Parameters:
        -----------
        xlsx_path : str
            The path to the XLSX file.

        Raises:
        -------
        ValueError
            If the provided xlsx_path is not an absolute path or not an Excel file with .xlsx extension.
        FileNotFoundError
            If the provided xlsx_path does not exist.

        Returns:
        --------
        None
        """
        if not os.path.isabs(xlsx_path):
            logger.error("The provided xlsx_path is not an absolute path.")
            raise ValueError("Please provide an absolute path for the xlsx_path.")

        if not os.path.exists(xlsx_path):
            logger.error(f"The provided xlsx_path does not exist: {xlsx_path}")
            raise FileNotFoundError(f"The path {xlsx_path} does not exist.")

        if not xlsx_path.endswith(".xlsx"):
            logger.error(f"The file {xlsx_path} is not an XLSX file.")
            raise ValueError(f"The file {xlsx_path} must be an XLSX file.")

        logger.debug(f"XLSX path is valid: {xlsx_path}")

    def read_data_as_pandas_dataframe(self, **kwargs):
        """
        Fetches data from an XLSX file.

        Raises:
        -------
        Exception
            If there is an issue in reading the file.

        Returns:
            pandas.DataFrame: The loaded data.

        Notes:
        ------
        The method uses pandas.read_excel() to read the data from the XLSX file.
        The method uses the following arguments to read the data:
        index_col=0, header=number_of_header_rows, parse_dates=True, engine="openpyxl"
        """
        number_of_header_rows = list(range(self.length_of_header))
        logger.debug(
            f"Reading data from excel file: {self.xlsx_path} with number_of_header_rows: {number_of_header_rows}"
        )

        try:
            df = pd.read_excel(
                self.xlsx_path,
                index_col=0,
                header=number_of_header_rows,
                parse_dates=True,
                engine="openpyxl",
                **kwargs,
            )
            df.index = pd.to_datetime(df.index)
            return df
        except Exception as e:
            logger.exception(f"Failed to fetch data from file: {self.xlsx_path} {e}")
            raise
