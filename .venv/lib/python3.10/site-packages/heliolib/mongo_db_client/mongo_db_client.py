import logging
import pandas as pd

logger = logging.getLogger(__name__)


class MongoDBClient:
    """
    A client for interacting with a MongoDB database.

    This class provides an interface for connecting to and querying data from a MongoDB database. It encapsulates
    methods for data retrieval and query parameter validation, ensuring streamlined interaction with the MongoDB server.

    Methods
    -------
    __init__(mongo_client):
        Initializes a new instance of the MongoDBClient with the given MongoClient.

    fetch_data_from_db(db_name, table_name, query_params=dict):
        Fetches data from the specified MongoDB database and collection and returns it as a pandas DataFrame.

    _validate_query_params(query_params):
        Validates the query parameters to ensure they conform to expected types and raises TypeError if not.

    Parameters
    ----------
    mongo_client : MongoClient
        An instance of the MongoClient that provides a connection to a MongoDB server.
    """

    def __init__(self, mongo_client):
        self.mongo_client = mongo_client

    """
    Initializes a new instance of the MongoDBClient class.

    Parameters
    ----------
    mongo_client : MongoClient
        An instance of the MongoClient that provides a connection to a MongoDB server.
    """

    @staticmethod
    def _validate_query_params(query_params):
        """
        Validates the given query parameters to ensure they conform to expected types.

        Parameters
        ----------
        query_params : dict
            A dictionary of query parameters where the key is the parameter name and the value is the parameter value.

        Raises
        ------
        TypeError
            If any query parameter does not conform to the expected data type.
        """

        for param, value in query_params.items():
            if (param == "plantId") or (param == "plant_id"):
                if not isinstance(query_params[param], str):
                    raise TypeError(f"Parameter {param} must be a string")
            if param == "inverter_id":
                if not isinstance(query_params[param], str):
                    raise TypeError(f"Parameter {param} must be a string")
            if param == "mppt_id":
                if not isinstance(query_params[param], str):
                    raise TypeError(f"Parameter {param} must be a string")
            if param == "string_id":
                if not isinstance(query_params[param], str):
                    raise TypeError(f"Parameter {param} must be a string")
            if param == "fault_name":
                if not isinstance(query_params[param], str):
                    raise TypeError(f"Parameter {param} must be a string")
            if param == "string_date":
                if not isinstance(query_params[param], str):
                    raise TypeError(f"Parameter {param} must be a string")
            if param == "date":
                if not isinstance(query_params[param], pd.Timestamp):
                    raise TypeError(f"Parameter {param} must be a type pd.Timestamp")

    def fetch_data_from_db(self, db_name, table_name, query_params=dict):
        """
        Fetches data from the specified MongoDB database and collection.

        This method queries a MongoDB database and collection based on the provided
        query parameters and returns the results as a pandas DataFrame.

        Parameters
        ----------
        db_name : str
            The name of the database to fetch data from.
        table_name : str
            The name of the collection to fetch data from.
        query_params : dict, optional
            A dictionary containing the query parameters for filtering the data in the
            MongoDB query. These parameters should conform to the MongoDB query syntax
            (default is an empty dictionary which selects all records).

        Returns
        -------
        pd.DataFrame
            A DataFrame containing the data fetched from the database.

        Raises
        ------
        Exception
            If there is an issue connecting to the MongoDB database or during data retrieval.
        """

        if query_params:
            self._validate_query_params(query_params)

        try:
            db = self.mongo_client[db_name]
            collection = db[table_name]

            if query_params:
                output = collection.find(query_params)
            else:
                output = collection.find()

            output = list(output)

            # Converting to the DataFrame
            output_dataframe = pd.DataFrame(output)
            return output_dataframe

        except Exception as e:
            logger.error(f"Failed to connect to MongoDB. {e}")
