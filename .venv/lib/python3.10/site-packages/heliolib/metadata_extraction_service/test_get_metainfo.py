import json
import os
import pandas as pd
import pytest
from typing import Generator

from .metadata_functions import MetadataAPI
from .get_metainfo import SystemInfoMetadataAPI


def load_mock_data(file_name: str) -> pd.DataFrame | dict:
    """
    Loads mock data from a file (JSON or CSV) for testing.

    Parameters
    ----------
    file_name : str
        The name of the mock file to load.

    Returns
    -------
    pd.DataFrame | dict
        A Pandas DataFrame if the file is CSV, or a dictionary if JSON.

    Raises
    ------
    ValueError
        If the file format is unsupported.
    """
    mock_file_path = os.path.join(
        os.path.dirname(__file__), "mocks/get_metainfo", file_name
    )

    if file_name.endswith(".json"):
        with open(mock_file_path, "r") as file:
            return json.load(file)
    elif file_name.endswith(".csv"):
        load_data_types = load_mock_data("metadata_tables_columns_data_types.json")
        return pd.read_csv(mock_file_path, dtype=load_data_types)
    else:
        raise ValueError(f"Unsupported file format: {file_name}")


@pytest.fixture(scope="module")
def system_info() -> Generator[SystemInfoMetadataAPI, None, None]:
    """
    Pytest fixture to initialize an instance of `SystemInfoMetadataAPI`.

    Returns
    -------
    Generator[SystemInfoMetadataAPI, None, None]
        Yields an instance of `SystemInfoMetadataAPI` with a mock metadata API.
    """
    base_url = "https://api.example.com/"
    options = {
        "page_size": 1000,
        "auth_url": "https://api.example.com/auth/login",
        "email": "system_info@heliolabs.com",
        "password": "test-password",
        "auth_expiration_seconds": 3600,
    }
    yield SystemInfoMetadataAPI(meta_db_api=MetadataAPI(base_url, options))


@pytest.mark.parametrize(
    "mock_tracker_json_file, mock_tracker_csv_file, company_id, plant_id",
    [("63_tracker_data.json", "63_tracker_data.csv", "9", "63")],
)
def test_prepare_trackers(
    mocker,
    system_info: SystemInfoMetadataAPI,
    mock_tracker_json_file: str,
    mock_tracker_csv_file: str,
    company_id: str,
    plant_id: str,
) -> None:
    """
    Tests `_prepare_trackers` method by comparing the output DataFrame with expected mock data.

    Parameters
    ----------
    mocker : pytest-mock.MockFixture
        The pytest mock fixture for patching method calls.
    system_info : SystemInfoMetadataAPI
        The test instance of `SystemInfoMetadataAPI`.
    mock_tracker_json_file : str
        The filename of the mock JSON data for trackers.
    mock_tracker_csv_file : str
        The filename of the expected output CSV data for trackers.
    company_id : str
        The company ID used in the test.
    plant_id : str
        The plant ID used in the test.

    Raises
    ------
    AssertionError
        If the output DataFrame does not match the expected DataFrame.
    """
    mock_tracker_json_data = load_mock_data(mock_tracker_json_file)
    mock_tracker_csv_data = load_mock_data(mock_tracker_csv_file)

    system_info.company_id = company_id
    system_info.plant_id = plant_id

    mocker.patch.object(
        system_info.metadb_client,
        "get_plant_metadata_table_by_plant_id",
        return_value=mock_tracker_json_data["data"],
    )

    result = system_info._prepare_trackers().astype(mock_tracker_csv_data.dtypes)

    assert isinstance(result, pd.DataFrame)
    pd.testing.assert_frame_equal(result, mock_tracker_csv_data)


@pytest.mark.parametrize(
    "mock_inverter_json_file, mock_inverter_csv_file, mock_inverter_models_csv_file, company_id, plant_id",
    [
        (
            "57_inverter_data.json",
            "57_inverter_data.csv",
            "57_inverter_models_data.csv",
            "5",
            "57",
        )
    ],
)
def test_prepare_inverters(
    mocker,
    system_info: SystemInfoMetadataAPI,
    mock_inverter_json_file: str,
    mock_inverter_csv_file: str,
    mock_inverter_models_csv_file: str,
    company_id: str,
    plant_id: str,
) -> None:
    """
    Tests `_prepare_inverters` method by comparing the output DataFrame with expected mock data.

    Parameters
    ----------
    mocker : pytest-mock.MockFixture
        The pytest mock fixture for patching method calls.
    system_info : SystemInfoMetadataAPI
        The test instance of `SystemInfoMetadataAPI`.
    mock_inverter_json_file : str
        The filename of the mock JSON data for inverters.
    mock_inverter_csv_file : str
        The filename of the expected output CSV data for inverters.
    mock_inverter_models_csv_file : str
        The filename of the expected output CSV data for inverter models.
    company_id : str
        The company ID used in the test.
    plant_id : str
        The plant ID used in the test.

    Raises
    ------
    AssertionError
        If the output DataFrame does not match the expected DataFrame.
    """
    mock_inverter_json_data = load_mock_data(mock_inverter_json_file)
    mock_inverter_csv_data = load_mock_data(mock_inverter_csv_file)
    mock_inverter_models_csv_data = load_mock_data(mock_inverter_models_csv_file)

    system_info.company_id = company_id
    system_info.plant_id = plant_id

    mocker.patch.object(
        system_info.metadb_client,
        "get_plant_metadata_table_by_plant_id",
        return_value=mock_inverter_json_data["data"],
    )

    mocker.patch.object(
        system_info,
        "_prepare_inverter_models_data",
        return_value=mock_inverter_models_csv_data,
    )

    result = system_info._prepare_inverters().astype(mock_inverter_csv_data.dtypes)

    assert isinstance(result, pd.DataFrame)
    pd.testing.assert_frame_equal(result, mock_inverter_csv_data)


@pytest.mark.parametrize(
    "mock_mppt_json_file, mock_mppt_csv_file, company_id, plant_id, ag_level_info",
    [
        (
            "mppt_data.json",
            "mppt_data.csv",
            "5",
            "57",
            {"ag_level_0": "mppt", "ag_level_1": "inv"},
        )
    ],
)
def test_prepare_mppts(
    mocker,
    system_info: SystemInfoMetadataAPI,
    mock_mppt_json_file: str,
    mock_mppt_csv_file: str,
    company_id: str,
    plant_id: str,
    ag_level_info: dict,
) -> None:
    """
    Tests `_prepare_mppts` method by comparing the output DataFrame with expected mock data.

    Parameters
    ----------
    mocker : pytest-mock.MockFixture
        The pytest mock fixture for patching method calls.
    system_info : SystemInfoMetadataAPI
        The test instance of `SystemInfoMetadataAPI`.
    mock_mppt_json_file : str
        The filename of the mock JSON data for mppts.
    mock_mppt_csv_file : str
        The filename of the expected output CSV data for mppts.
    company_id : str
        The company ID used in the test.
    plant_id : str
        The plant ID used in the test.

    Raises
    ------
    AssertionError
        If the output DataFrame does not match the expected DataFrame.
    """

    mock_mppt_json_data = load_mock_data(mock_mppt_json_file)
    mock_mppt_csv_data = load_mock_data(mock_mppt_csv_file)

    system_info.company_id = company_id
    system_info.plant_id = plant_id

    mocker.patch.object(
        system_info.metadb_client,
        "get_plant_metadata_table_by_plant_id",
        return_value=mock_mppt_json_data["data"],
    )

    result = system_info._prepare_mppts(ag_level_info).astype(mock_mppt_csv_data.dtypes)

    assert isinstance(result, pd.DataFrame)
    pd.testing.assert_frame_equal(result, mock_mppt_csv_data)


@pytest.mark.parametrize(
    "mock_orientation_json_file, mock_orientation_csv_file, company_id, plant_id, reference_date",
    [("orientation_data.json", "orientation_data.csv", "9", "63", "2024-06-15")],
)
def test_prepare_orientation_data(
    mocker,
    system_info: SystemInfoMetadataAPI,
    mock_orientation_json_file: str,
    mock_orientation_csv_file: str,
    company_id: str,
    plant_id: str,
    reference_date: str,
) -> None:
    """
    Tests `_prepare_orientation_data` method by comparing the output DataFrame with expected mock data.

    Parameters
    ----------
    mocker : pytest-mock.MockFixture
        The pytest mock fixture for patching method calls.
    system_info : SystemInfoMetadataAPI
        The test instance of `SystemInfoMetadataAPI`.
    mock_orientation_json_file : str
        The filename of the mock JSON data for orientation.
    mock_orientation_csv_file : str
        The filename of the expected output CSV data for orientation.
    company_id : str
        The company ID used in the test.
    plant_id : str
        The plant ID used in the test.
    reference_date : str
        The reference date in 'YYYY-MM-DD' format.

    Raises
    ------
    AssertionError
        If the output DataFrame does not match the expected DataFrame.
    """
    mock_orientation_json_data = load_mock_data(mock_orientation_json_file)
    mock_orientation_csv_data = load_mock_data(mock_orientation_csv_file)

    system_info.company_id = company_id
    system_info.plant_id = plant_id
    system_info.reference_date = pd.to_datetime(reference_date)

    mocker.patch.object(
        system_info.metadb_client,
        "get_plant_metadata_table_by_plant_id",
        return_value=mock_orientation_json_data["data"],
    )

    result = system_info._prepare_orientation_data().astype(
        mock_orientation_csv_data.dtypes
    )

    assert isinstance(result, pd.DataFrame)
    pd.testing.assert_frame_equal(result, mock_orientation_csv_data)


@pytest.mark.parametrize(
    "mock_attributes_json_file, mock_attributes_csv_file, company_id, plant_id",
    [
        ("mppt_attributes_data.json", "mppt_attributes_data.csv", "5", "57"),
        ("string_attributes_data.json", "string_attributes_data.csv", "12", "66"),
        ("tracker_attributes_data.json", "tracker_attributes_data.csv", "9", "63"),
    ],
)
def test_prepare_attributes(
    mocker,
    system_info: SystemInfoMetadataAPI,
    mock_attributes_json_file: str,
    mock_attributes_csv_file: str,
    company_id: str,
    plant_id: str,
) -> None:
    """
    Tests `_prepare_attributes` method by comparing the output DataFrame with expected mock data.

    Parameters
    ----------
    mocker : pytest-mock.MockFixture
        The pytest mock fixture for patching method calls.
    system_info : SystemInfoMetadataAPI
        The test instance of `SystemInfoMetadataAPI`.
    mock_attributes_json_file : str
        The filename of the mock JSON data for attributes.
    mock_attributes_csv_file : str
        The filename of the expected output CSV data for attributes.
    company_id : str
        The company ID used in the test.
    plant_id : str
        The plant ID used in the test.

    Raises
    ------
    AssertionError
        If the output DataFrame does not match the expected DataFrame.
    """
    mock_attributes_json_data = load_mock_data(mock_attributes_json_file)
    mock_attributes_csv_data = load_mock_data(mock_attributes_csv_file)

    system_info.company_id = company_id
    system_info.plant_id = plant_id

    mocker.patch.object(
        system_info.metadb_client,
        "get_plant_metadata_table_by_plant_id",
        return_value=mock_attributes_json_data["data"],
    )

    result = system_info._prepare_attributes().astype(mock_attributes_csv_data.dtypes)

    assert isinstance(result, pd.DataFrame)
    pd.testing.assert_frame_equal(result, mock_attributes_csv_data)


@pytest.mark.parametrize(
    "company_id, plant_id, reference_date", [("5", "57", "2025-01-01")]
)
def test_get_plant_meta_data_returns_valid_data(
    mocker,
    system_info: SystemInfoMetadataAPI,
    company_id: str,
    plant_id: str,
    reference_date: str,
) -> None:
    """
    Tests `get_plant_meta_data` method by ensuring that the returned DataFrames match the expected mock data.
    """
    mock_plant_table = load_mock_data("57_plant_table_info.csv")
    mock_array_info = load_mock_data("57_array_info.csv").set_index(
        ["ag_level_1", "ag_level_0"]
    )
    mock_plant_data = load_mock_data("57_plant_data.json")["data"]
    mock_inverter_models = load_mock_data("57_inverter_models_data.csv")
    mock_inverter_data = load_mock_data("57_inverter_data.csv")
    mock_mppt_data = load_mock_data("57_mppt_data.csv")
    mock_orientation_data = load_mock_data("57_orientation_data.csv")
    mock_attributes_data = load_mock_data("57_attributes_data.csv")
    mock_panel_models = load_mock_data("57_panel_models_data.csv")

    system_info.company_id = company_id
    system_info.plant_id = plant_id

    mocker.patch.object(
        system_info, "_prepare_plant_data", return_value=mock_plant_data
    )
    mocker.patch.object(
        system_info, "_prepare_inverter_models_data", return_value=mock_inverter_models
    )
    mocker.patch.object(
        system_info, "_prepare_inverters", return_value=mock_inverter_data
    )
    mocker.patch.object(system_info, "_prepare_mppts", return_value=mock_mppt_data)
    mocker.patch.object(
        system_info, "_prepare_orientation_data", return_value=mock_orientation_data
    )
    mocker.patch.object(
        system_info, "_prepare_attributes", return_value=mock_attributes_data
    )
    mocker.patch.object(
        system_info, "_prepare_panel_models_data", return_value=mock_panel_models
    )

    plant_table, array_info = system_info.get_plant_meta_data(
        plant_id=system_info.plant_id, reference_date=reference_date
    )

    array_info = array_info.astype(mock_array_info.dtypes)
    plant_table = plant_table.astype(mock_plant_table.dtypes)

    assert isinstance(array_info, pd.DataFrame)
    assert isinstance(plant_table, pd.DataFrame)
    pd.testing.assert_frame_equal(array_info, mock_array_info)
    pd.testing.assert_frame_equal(plant_table, mock_plant_table)
