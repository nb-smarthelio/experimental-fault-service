from datetime import datetime, timedelta

import httpx


class AuthInterceptor:
    def __init__(
        self, email: str, password: str, expiration_period_seconds: int, auth_url: str
    ):
        """
        Initialize the AuthInterceptor with credentials, expiration period, and the authentication URL.
        """
        self.email = email
        self.password = password
        self.auth_url = auth_url
        self.expiration_period = timedelta(seconds=expiration_period_seconds)
        self.last_generated = None
        self.token = None

    def _generate_token(self) -> str:
        """
        Authenticate using email and password, and fetch the access token from the API.
        """
        # POST request to the authentication server with email and password
        response = httpx.post(
            self.auth_url, data={"email": self.email, "password": self.password}
        )
        if response.status_code == 200:
            token = response.json().get("accessToken")
            if token:
                return token
            else:
                raise ValueError("Authentication failed: No token in response.")
        else:
            raise ValueError(
                f"Authentication failed with status code {response.status_code}: {response.text}"
            )

    def _has_token_expired(self) -> bool:
        """
        Check if the token has expired.
        """
        if self.last_generated is None:
            return True
        return datetime.now() > self.last_generated + self.expiration_period

    def get_access_token(self) -> str:
        """
        Get the access token. If the token is expired, generate a new one.
        """
        if self._has_token_expired():
            self.token = self._generate_token()
            self.last_generated = datetime.now()
        return self.token
